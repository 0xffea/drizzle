CREATE SCHEMA data_dictionary;
SELECT ID FROM data_dictionary.processlist;
ID
#
SELECT ID FROM data_dictionary.processlist ORDER BY ID;
ID
#
SELECT a.ID FROM data_dictionary.processlist as a, data_dictionary.processlist as b ORDER BY ID;
ID
#
SELECT a.ID FROM data_dictionary.processlist as a, data_dictionary.processlist as b;
ID
#
SELECT count(*) FROM data_dictionary.plugins;
count(*)
#
SELECT count(*) FROM data_dictionary.columns;
count(*)
#
SELECT count(*) FROM data_dictionary.indexes;
count(*)
#
SELECT count(*) FROM data_dictionary.index_parts;
count(*)
#
SELECT count(*) FROM data_dictionary.modules;
count(*)
#
SELECT * FROM data_dictionary.character_sets ORDER BY CHARACTER_SET_NAME;
CHARACTER_SET_NAME	DEFAULT_COLLATE_NAME	DESCRIPTION	MAXLEN
binary	binary		1
utf8	utf8_general_ci	UTF-8 Unicode	4
SELECT * FROM data_dictionary.collations ORDER BY COLLATION_NAME;
CHARACTER_SET_NAME	COLLATION_NAME	DESCRIPTION	ID	IS_DEFAULT	IS_COMPILED	SORTLEN
binary	binary	binary	63	TRUE	TRUE	1
utf8_general_ci	utf8_bin	utf8	46	FALSE	TRUE	1
utf8_general_ci	utf8_czech_ci	utf8	234	FALSE	TRUE	8
utf8_general_ci	utf8_danish_ci	utf8	235	FALSE	TRUE	8
utf8_general_ci	utf8_esperanto_ci	utf8	241	FALSE	TRUE	8
utf8_general_ci	utf8_estonian_ci	utf8	230	FALSE	TRUE	8
utf8_general_ci	utf8_general_ci	utf8	45	TRUE	TRUE	1
utf8_general_ci	utf8_hungarian_ci	utf8	242	FALSE	TRUE	8
utf8_general_ci	utf8_icelandic_ci	utf8	225	FALSE	TRUE	8
utf8_general_ci	utf8_latvian_ci	utf8	226	FALSE	TRUE	8
utf8_general_ci	utf8_lithuanian_ci	utf8	236	FALSE	TRUE	8
utf8_general_ci	utf8_persian_ci	utf8	240	FALSE	TRUE	8
utf8_general_ci	utf8_polish_ci	utf8	229	FALSE	TRUE	8
utf8_general_ci	utf8_romanian_ci	utf8	227	FALSE	TRUE	8
utf8_general_ci	utf8_roman_ci	utf8	239	FALSE	TRUE	8
utf8_general_ci	utf8_sinhala_ci	utf8	243	FALSE	TRUE	8
utf8_general_ci	utf8_slovak_ci	utf8	237	FALSE	TRUE	8
utf8_general_ci	utf8_slovenian_ci	utf8	228	FALSE	TRUE	8
utf8_general_ci	utf8_spanish2_ci	utf8	238	FALSE	TRUE	8
utf8_general_ci	utf8_spanish_ci	utf8	231	FALSE	TRUE	8
utf8_general_ci	utf8_swedish_ci	utf8	232	FALSE	TRUE	8
utf8_general_ci	utf8_turkish_ci	utf8	233	FALSE	TRUE	8
utf8_general_ci	utf8_unicode_ci	utf8	224	FALSE	TRUE	8
SELECT SCHEMA_NAME  FROM data_dictionary.schemas;
SCHEMA_NAME
#
#
#
#
SELECT COLUMN_NAME  FROM data_dictionary.columns;
COLUMN_NAME
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
SELECT count(*) FROM data_dictionary.GLOBAL_STATEMENTS;
count(*)
#
SELECT count(*) FROM data_dictionary.GLOBAL_STATUS;
count(*)
#
SELECT count(*) FROM data_dictionary.GLOBAL_VARIABLES;
count(*)
#
SELECT count(*) FROM data_dictionary.SESSION_STATEMENTS;
count(*)
#
SELECT count(*) FROM data_dictionary.SESSION_STATUS;
count(*)
#
SELECT count(*) FROM data_dictionary.SESSION_VARIABLES;
count(*)
#
use data_dictionary;
show create table CHARACTER_SETS ;
Table	Create Table
CHARACTER_SETS	CREATE TABLE `character_sets` (
  `CHARACTER_SET_NAME` varchar(64) NOT NULL DEFAULT '',
  `DEFAULT_COLLATE_NAME` varchar(64) NOT NULL DEFAULT '',
  `DESCRIPTION` varchar(64) NOT NULL DEFAULT '',
  `MAXLEN` bigint NOT NULL DEFAULT '0'
) ENGINE=FunctionEngine
show create table COLLATIONS ;
Table	Create Table
COLLATIONS	CREATE TABLE `collations` (
  `CHARACTER_SET_NAME` varchar(64) NOT NULL DEFAULT '',
  `COLLATION_NAME` varchar(64) NOT NULL DEFAULT '',
  `DESCRIPTION` varchar(64) NOT NULL DEFAULT '',
  `ID` bigint NOT NULL DEFAULT '0',
  `IS_DEFAULT` varchar(5) NOT NULL DEFAULT '',
  `IS_COMPILED` varchar(5) NOT NULL DEFAULT '',
  `SORTLEN` bigint NOT NULL DEFAULT '0'
) ENGINE=FunctionEngine
show create table COLUMNS ;
Table	Create Table
COLUMNS	CREATE TABLE `columns` (
  `TABLE_SCHEMA` varchar(64) NOT NULL DEFAULT '',
  `TABLE_NAME` varchar(64) NOT NULL DEFAULT '',
  `COLUMN_NAME` varchar(64) NOT NULL DEFAULT '',
  `ORDINAL_POSITION` bigint NOT NULL DEFAULT '0',
  `COLUMN_DEFAULT` varchar(64) NOT NULL DEFAULT '',
  `IS_NULLABLE` varchar(5) NOT NULL DEFAULT '',
  `DATATYPE` varchar(64) NOT NULL DEFAULT '',
  `CHARACTER_MAXIMUM_LENGTH` bigint NOT NULL DEFAULT '0',
  `CHARACTER_OCTET_LENGTH` bigint NOT NULL DEFAULT '0',
  `NUMERIC_PRECISION` bigint NOT NULL DEFAULT '0',
  `NUMERIC_SCALE` bigint NOT NULL DEFAULT '0',
  `COLLATION_NAME` varchar(64) NOT NULL DEFAULT '',
  `COLUMN_COMMENT` varchar(1024) NOT NULL DEFAULT ''
) ENGINE=FunctionEngine
show create table GLOBAL_STATUS ;
Table	Create Table
GLOBAL_STATUS	CREATE TABLE `global_status` (
  `VARIABLE_NAME` varchar(64) NOT NULL DEFAULT '',
  `VARIABLE_VALUE` varchar(16300) NOT NULL DEFAULT ''
) ENGINE=FunctionEngine
show create table GLOBAL_STATEMENTS ;
Table	Create Table
GLOBAL_STATEMENTS	CREATE TABLE `global_statements` (
  `VARIABLE_NAME` varchar(64) NOT NULL DEFAULT '',
  `VARIABLE_VALUE` varchar(16300) NOT NULL DEFAULT ''
) ENGINE=FunctionEngine
show create table GLOBAL_VARIABLES ;
Table	Create Table
GLOBAL_VARIABLES	CREATE TABLE `global_variables` (
  `VARIABLE_NAME` varchar(64) NOT NULL DEFAULT '',
  `VARIABLE_VALUE` varchar(16300) NOT NULL DEFAULT ''
) ENGINE=FunctionEngine
show create table INDEXES ;
Table	Create Table
INDEXES	CREATE TABLE `indexes` (
  `TABLE_SCHEMA` varchar(64) NOT NULL DEFAULT '',
  `TABLE_NAME` varchar(64) NOT NULL DEFAULT '',
  `INDEX_NAME` varchar(64) NOT NULL DEFAULT '',
  `IS_PRIMARY` varchar(5) NOT NULL DEFAULT '',
  `IS_UNIQUE` varchar(5) NOT NULL DEFAULT '',
  `IS_NULLABLE` varchar(5) NOT NULL DEFAULT '',
  `KEY_LENGTH` bigint NOT NULL DEFAULT '0',
  `INDEX_TYPE` varchar(64) NOT NULL DEFAULT '',
  `INDEX_COMMENT` varchar(1024) NOT NULL DEFAULT ''
) ENGINE=FunctionEngine
show create table INDEX_PARTS ;
Table	Create Table
INDEX_PARTS	CREATE TABLE `index_parts` (
  `TABLE_SCHEMA` varchar(64) NOT NULL DEFAULT '',
  `TABLE_NAME` varchar(64) NOT NULL DEFAULT '',
  `INDEX_NAME` varchar(64) NOT NULL DEFAULT '',
  `COLUMN_NAME` varchar(64) NOT NULL DEFAULT '',
  `COLUMN_NUMBER` bigint NOT NULL DEFAULT '0',
  `COMPARE_LENGTH` bigint NOT NULL DEFAULT '0',
  `IS_ORDER_REVERSE` varchar(5) NOT NULL DEFAULT ''
) ENGINE=FunctionEngine
show create table MODULES ;
Table	Create Table
MODULES	CREATE TABLE `modules` (
  `MODULE_NAME` varchar(64) NOT NULL DEFAULT '',
  `MODULE_VERSION` varchar(20) NOT NULL DEFAULT '',
  `MODULE_AUTHOR` varchar(64) NOT NULL DEFAULT '',
  `IS_BUILTIN` varchar(5) NOT NULL DEFAULT '',
  `MODULE_LIBRARY` varchar(254) NOT NULL DEFAULT '',
  `MODULE_DESCRIPTION` varchar(254) NOT NULL DEFAULT '',
  `MODULE_LICENSE` varchar(80) NOT NULL DEFAULT ''
) ENGINE=FunctionEngine
show create table PLUGINS ;
Table	Create Table
PLUGINS	CREATE TABLE `plugins` (
  `PLUGIN_NAME` varchar(64) NOT NULL DEFAULT '',
  `PLUGIN_TYPE` varchar(64) NOT NULL DEFAULT '',
  `IS_ACTIVE` varchar(5) NOT NULL DEFAULT '',
  `MODULE_NAME` varchar(64) NOT NULL DEFAULT ''
) ENGINE=FunctionEngine
show create table PROCESSLIST ;
Table	Create Table
PROCESSLIST	CREATE TABLE `processlist` (
  `ID` bigint NOT NULL DEFAULT '0',
  `USER` varchar(16) NOT NULL DEFAULT '',
  `HOST` varchar(1025) NOT NULL DEFAULT '',
  `DB` varchar(64) NOT NULL DEFAULT '',
  `COMMAND` varchar(16) NOT NULL DEFAULT '',
  `TIME` bigint NOT NULL DEFAULT '0',
  `STATE` varchar(16) NOT NULL DEFAULT '',
  `INFO` varchar(100) NOT NULL DEFAULT ''
) ENGINE=FunctionEngine
show create table REFERENTIAL_CONSTRAINTS ;
Table	Create Table
REFERENTIAL_CONSTRAINTS	CREATE TABLE `referential_constraints` (
  `CONSTRAINT_SCHEMA` varchar(64) NOT NULL DEFAULT '',
  `CONSTRAINT_NAME` varchar(64) NOT NULL DEFAULT '',
  `UNIQUE_CONSTRAINT_SCHEMA` varchar(64) NOT NULL DEFAULT '',
  `UNIQUE_CONSTRAINT_NAME` varchar(64) NOT NULL DEFAULT '',
  `MATCH_OPTION` varchar(64) NOT NULL DEFAULT '',
  `UPDATE_RULE` varchar(64) NOT NULL DEFAULT '',
  `DELETE_RULE` varchar(64) NOT NULL DEFAULT '',
  `TABLE_NAME` varchar(64) NOT NULL DEFAULT '',
  `REFERENCED_TABLE_NAME` varchar(64) NOT NULL DEFAULT ''
) ENGINE=FunctionEngine
show create table SCHEMAS ;
Table	Create Table
SCHEMAS	CREATE TABLE `schemas` (
  `SCHEMA_NAME` varchar(64) NOT NULL DEFAULT '',
  `DEFAULT_COLLATION_NAME` varchar(64) NOT NULL DEFAULT ''
) ENGINE=FunctionEngine
show create table SESSION_STATEMENTS;
Table	Create Table
SESSION_STATEMENTS	CREATE TABLE `session_statements` (
  `VARIABLE_NAME` varchar(64) NOT NULL DEFAULT '',
  `VARIABLE_VALUE` varchar(16300) NOT NULL DEFAULT ''
) ENGINE=FunctionEngine
show create table SESSION_STATUS;
Table	Create Table
SESSION_STATUS	CREATE TABLE `session_status` (
  `VARIABLE_NAME` varchar(64) NOT NULL DEFAULT '',
  `VARIABLE_VALUE` varchar(16300) NOT NULL DEFAULT ''
) ENGINE=FunctionEngine
show create table SESSION_VARIABLES;
Table	Create Table
SESSION_VARIABLES	CREATE TABLE `session_variables` (
  `VARIABLE_NAME` varchar(64) NOT NULL DEFAULT '',
  `VARIABLE_VALUE` varchar(16300) NOT NULL DEFAULT ''
) ENGINE=FunctionEngine
show create table TABLES ;
Table	Create Table
TABLES	CREATE TABLE `tables` (
  `TABLE_SCHEMA` varchar(64) NOT NULL DEFAULT '',
  `TABLE_NAME` varchar(64) NOT NULL DEFAULT '',
  `TABLE_TYPE` varchar(64) NOT NULL DEFAULT '',
  `ENGINE` varchar(64) NOT NULL DEFAULT '',
  `ROW_FORMAT` varchar(10) NOT NULL DEFAULT '',
  `TABLE_COLLATION` varchar(64) NOT NULL DEFAULT '',
  `TABLE_COMMENT` varchar(2048) NOT NULL DEFAULT ''
) ENGINE=FunctionEngine
show create table TABLE_CONSTRAINTS ;
Table	Create Table
TABLE_CONSTRAINTS	CREATE TABLE `table_constraints` (
  `CONSTRAINT_SCHEMA` varchar(64) NOT NULL DEFAULT '',
  `CONSTRAINT_NAME` varchar(64) NOT NULL DEFAULT '',
  `TABLE_SCHEMA` varchar(64) NOT NULL DEFAULT '',
  `TABLE_NAME` varchar(64) NOT NULL DEFAULT '',
  `CONSTRAINT_TYPE` varchar(64) NOT NULL DEFAULT ''
) ENGINE=FunctionEngine
CREATE SCHEMA drizzleslap;
DROP SCHEMA drizzleslap;
DROP SCHEMA data_dictionary;
CREATE SCHEMA A;
use A;
create table A (a int);
SELECT COUNT(*) FROM data_dictionary.tables WHERE TABLE_NAME = "A";
COUNT(*)
1
DROP SCHEMA A;
