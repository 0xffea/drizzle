# 
# Simple test of the serial event log for single INSERT statements
# 
# We create a table and insert some records
# into it.
# 
# We then use the transaction_reader in drizzled/message/ to read the events.
#

--disable_warnings
DROP TABLE IF EXISTS t1;
--enable_warnings

CREATE TABLE t1 (
  id INT NOT NULL
, padding VARCHAR(200) NOT NULL
);

# Test inserts
INSERT INTO t1 VALUES (1, "I love testing.");
INSERT INTO t1 VALUES (2, "I hate testing.");

# Test updates
UPDATE t1 SET padding= "I REALLY love testing." WHERE id = 1;
UPDATE t1 SET padding= "I REALLY hate testing." WHERE id = 2;

# Test multi inserts
INSERT INTO t1 VALUES (3, "I still love testing."), (4, "I still hate testing.");

# Delete a record
DELETE FROM t1 where id = 1;

# Cleanup
DROP TABLE t1; 

# tmp table operations
CREATE TABLE t1 (
  id INT NOT NULL
, padding VARCHAR(200) NOT NULL
);

CREATE TEMPORARY TABLE t2 (
  id INT NOT NULL
, padding VARCHAR(200) NOT NULL
);

CREATE TEMPORARY TABLE t3 LIKE t1;

INSERT INTO t2 VALUES (1, "I love testing.");
INSERT INTO t2 VALUES (2, "I hate testing.");

INSERT INTO t1 SELECT * FROM t2;

# Cleanup
DROP TABLE t1;

# rand()
CREATE TABLE t1 (
  id INT NOT NULL
, PRIMARY KEY (id)
);

INSERT INTO t1 VALUES (1);
INSERT INTO t1 SELECT rand(100)*100 FROM t1;

# Cleanup
DROP TABLE t1;

# DDL tests 
CREATE DATABASE test1;
DROP DATABASE test1;
use test;
CREATE TABLE t1 (
  id INT NOT NULL
, padding VARCHAR(200) NOT NULL
);
INSERT INTO t1 VALUES (1, "I love testing.");
INSERT INTO t1 VALUES (2, "I hate testing.");
TRUNCATE TABLE t1;
ALTER TABLE t1 ADD dummy INT;
RENAME TABLE t1 TO t1rename;

# Cleanup
DROP TABLE t1rename;

# Read in the event.log.  We must cut out all the Timestamp: XXXXXX
# because they are not deterministic.
--exec ../drizzled/message/command_reader var/master-data/event.log | sed 's/Timestamp: [0-9]*//g'
