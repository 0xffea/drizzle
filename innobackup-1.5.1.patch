--- innobackup-1.5.1_orig	2009-03-04 21:41:35.000000000 +0900
+++ innobackupex-1.5.1	2009-03-13 14:31:12.000000000 +0900
@@ -8,6 +8,7 @@
 
 use strict;
 use Getopt::Long;
+use File::Spec;
 use POSIX "strftime";
 use POSIX ":sys_wait_h";
 use POSIX "tmpnam";
@@ -15,7 +16,7 @@
 
 
 # version of this script
-my $innobackup_version = '1.5.1';
+my $innobackup_version = '1.5.1-xtrabackup';
 
 # copyright notice
 my $copyright_notice = 
@@ -64,6 +65,7 @@
 my $option_copy_back = '';
 my $option_include = '';
 my $option_databases = '';
+my $option_throttle = '';
 my $option_sleep = '';
 my $option_compress = 999;
 my $option_uncompress = '';
@@ -74,10 +76,15 @@
 my $option_mysql_socket = '';
 my $option_no_timestamp = '';
 my $option_slave_info = '';
-my $option_ibbackup_binary = 'ibbackup';
+my $option_ibbackup_binary = 'xtrabackup';
+
+my $option_incremental = '';
+my $option_remote_host = '';
+my $option_stream = '';
+my $option_tmpdir = '';
 
 # name of the my.cnf configuration file
-my $config_file = '';
+#my $config_file = '';
 
 # root of the backup directory
 my $backup_root = '';
@@ -88,6 +95,9 @@
 # name of the ibbackup suspend-at-end file
 my $suspend_file = '';
 
+# name of the temporary transaction log file during the backup
+my $tmp_logfile = '';
+
 # home directory of innoDB log files
 my $innodb_log_group_home_dir = '';
 
@@ -98,13 +108,13 @@
 my %config;
 
 # options from the backup options file
-my %backup_config;
+#my %backup_config;
 
 # list of databases to be included in a backup
 my %databases_list;
 
 # prefix for output lines
-my $prefix = 'innobackup:';
+my $prefix = 'innobackupex:';
 
 # process id of mysql client program (runs as a child process of this script)
 my $mysql_pid = '';
@@ -186,7 +196,12 @@
 
 # program has completed successfully
 $now = current_time();
-print "$now  $prefix innobackup completed OK!\n";
+print STDERR "$now  $prefix innobackup completed OK!\n";
+
+if ($option_stream eq 'tar') {
+    print STDERR "$prefix You must use -i (--ignore-zeros) option for extraction of the tar stream.\n";
+}
+
 exit 0;
 
 ######################################################################
@@ -198,7 +213,7 @@
 # print_version subroutine prints program version and copyright.
 #
 sub print_version {
-    printf($copyright_notice);
+    printf(STDERR $copyright_notice);
 }
 
 
@@ -206,16 +221,16 @@
 # usage subroutine prints instructions of how to use this program to stdout.
 #
 sub usage {
-    print <<EOF;
+    print STDERR <<EOF;
 
 Usage:
 innobackup [--sleep=MS] [--compress[=LEVEL]] [--include=REGEXP] [--user=NAME] 
            [--password=WORD] [--port=PORT] [--socket=SOCKET] [--no-timestamp] 
            [--ibbackup=IBBACKUP-BINARY] [--slave-info]
-           [--databases=LIST] MY.CNF BACKUP-ROOT-DIR
+           [--databases=LIST] [--remote-host=HOSTNAME] BACKUP-ROOT-DIR
 innobackup --apply-log [--use-memory=MB] [--uncompress] 
-           [--ibbackup=IBBACKUP-BINARY] MY.CNF BACKUP-DIR
-innobackup --copy-back MY.CNF BACKUP-DIR
+           [--ibbackup=IBBACKUP-BINARY] BACKUP-DIR
+innobackup --copy-back BACKUP-DIR
 
 The first command line above makes a hot backup of a MySQL database.
 By default it creates a backup directory (named by the current date
@@ -261,18 +276,37 @@
     --copy-back Copy data and index files from backup directory back to 
                 their original locations.
 
+    --remote-host=HOSTNAME
+                If this option is specified, backup files will be created
+                at the remote host by using ssh connection.
+
+    --stream=[tar|cpio]
+                If this option is specified, backup to STDOUT as specified
+                format.
+
+    --tmpdir=DIRECTORY
+                When --remote-host or --stream specified, transaction log
+                should be stored temporary. The default value is same to
+                mysqld setting.
+
     --use-memory=MB
                 This option is passed to the ibbackup child process.
                 It tells ibbackup that it can use MB megabytes of 
                 memory in restoration.
                 Try 'ibbackup --help' for more details on this option.
 
+    --throttle=IOS
+                This option is passed to the xtrabackup child process.
+                It limits count of IO operations (pairs of read&write) per
+                second to IOS values (for '--backup')
+
     --sleep=MS  This option is passed to the ibbackup child process.
                 It instructs the ibbackup program to sleep 
                 MS milliseconds after each 1 MB of copied data.
                 You can use this parameter to tune the additional 
                 disk i/o load the ibbackup program causes on the computer.
                 Try 'ibbackup --help' for more details on this option.
+                ** it is not supported by xtrabackup **
 
     --compress[=LEVEL]
                 This option is passed to the ibbackup child process.
@@ -283,6 +317,7 @@
                 9 gives best compression, and 0 means no compression. 
                 If compression level is not given, the default level 1 is used.
                 Try 'ibbackup --help' for more details on this option.
+                ** it is not supported by xtrabackup yet **
 
     --include=REGEXP 
                 This option is passed to the ibbackup child process.
@@ -312,6 +347,7 @@
                 This option is passed to the ibbackup child process.
                 It tells ibbackup to uncompress compressed InnoDB data files.
                 Try 'ibbackup --help' for more details on this option.
+                ** it is not supported by xtrabackup yet **
                 
     --user=NAME This option is passed to the mysql child process.
                 It defines the user for database login if not current user.
@@ -408,7 +444,9 @@
     start_ibbackup();
 
     # wait for ibbackup to suspend itself
-    wait_for_ibbackup_suspend();
+    if (!$option_remote_host && !$option_stream) {
+        wait_for_ibbackup_suspend();
+    }
 
     # connect to database
     mysql_open();
@@ -429,12 +467,22 @@
     # disconnect from database
     mysql_close();
 
-    print "\n$prefix Backup created in directory '$backup_dir'\n";
+    if ($option_remote_host) {
+        system("scp -Cp -c arcfour '$tmp_logfile' '$option_remote_host:$backup_dir/xtrabackup_logfile'")
+            and Die "Failed to scp file '$option_remote_host:$backup_dir/xtrabackup_logfile': $!";
+        unlink $tmp_logfile || Die "Failed to delete '$tmp_logfile': $!";
+    } elsif ($option_stream eq 'tar') {
+        system("cd $option_tmpdir; tar cf - xtrabackup_logfile")
+            and Die "Failed to stream 'xtrabackup_logfile': $!";
+        unlink $tmp_logfile || Die "Failed to delete '$tmp_logfile': $!";
+    }
+
+    print STDERR "\n$prefix Backup created in directory '$backup_dir'\n";
     if ($mysql_binlog_position) {
-        print "$prefix MySQL binlog position: $mysql_binlog_position\n";
+        print STDERR "$prefix MySQL binlog position: $mysql_binlog_position\n";
     }
     if ($mysql_slave_position && $option_slave_info) {
-        print "$prefix MySQL slave binlog position: $mysql_slave_position\n";
+        print STDERR "$prefix MySQL slave binlog position: $mysql_slave_position\n";
     }
 }
 
@@ -504,7 +552,7 @@
     my $orig_iblog_dir =
         get_option(\%config, 'mysqld', 'innodb_log_group_home_dir');
     my $excluded_files = 
-        '^(\.\.?|backup-my\.cnf|ibbackup_logfile|mysql-std(err|out)|.*\.ibz)$';
+        '^(\.\.?|backup-my\.cnf|xtrabackup_logfile|mysql-std(err|out)|.*\.ibz)$';
     my @ibdata_files;
     my $iblog_files = '^ib_logfile.*$';
     my $compressed_data_file = '.*\.ibz$';
@@ -526,17 +574,17 @@
 
     # check that the original options file and the backup options file have
     # the same value for "innodb_data_file_path" option
-    $backup_innodb_data_file_path = 
-        get_option(\%backup_config, 'mysqld', 'innodb_data_file_path');
-    if (!are_equal_innodb_data_file_paths($orig_innodb_data_file_path, 
-                                          $backup_innodb_data_file_path)
-    ) {
-        Die "The value of 'innodb_data_file_path' option in the original "
-          . "my.cnf file '$config_file' is different from the value "
-          . "in the backup my.cnf file '$backup_config_file'.\n(original: "
-          . "'$orig_innodb_data_file_path')\n"
-          . "(backup:   '$backup_innodb_data_file_path')";
-    }
+    #$backup_innodb_data_file_path = 
+    #    get_option(\%backup_config, 'mysqld', 'innodb_data_file_path');
+    #if (!are_equal_innodb_data_file_paths($orig_innodb_data_file_path, 
+    #                                      $backup_innodb_data_file_path)
+    #) {
+    #    Die "The value of 'innodb_data_file_path' option in the original "
+    #      . "my.cnf file '$config_file' is different from the value "
+    #      . "in the backup my.cnf file '$backup_config_file'.\n(original: "
+    #      . "'$orig_innodb_data_file_path')\n"
+    #      . "(backup:   '$backup_innodb_data_file_path')";
+    #}
 
     # make a list of all ibdata files in the backup directory and all
     # directories in the backup directory under which there are ibdata files
@@ -566,10 +614,10 @@
     # copy files to original data directory
     opendir(DIR, $backup_dir) 
         || Die "Can't open directory '$backup_dir': $!\n";
-    print "$prefix Starting to copy MyISAM tables, indexes,\n"; 
-    print "$prefix .MRG, .TRG, .TRN, .opt, and .frm files\n";
-    print "$prefix in '$backup_dir'\n";
-    print "$prefix back to original data directory '$orig_datadir'\n";
+    print STDERR "$prefix Starting to copy MyISAM tables, indexes,\n"; 
+    print STDERR "$prefix .MRG, .TRG, .TRN, .opt, and .frm files\n";
+    print STDERR "$prefix in '$backup_dir'\n";
+    print STDERR "$prefix back to original data directory '$orig_datadir'\n";
     while (defined($file = readdir(DIR))) {
         if ($file =~ /$excluded_files/) { next; }
         if (is_in_array($file, \@ibdata_files)) { next; }
@@ -578,7 +626,7 @@
             my $subdir = "$backup_dir/$file";
             my $file2;
 
-            print "$prefix Copying directory '$subdir'\n";
+            print STDERR "$prefix Copying directory '$subdir'\n";
             if (! -x "$orig_datadir/$file") {
                 system("mkdir '$orig_datadir/$file'") 
                     and Die "Failed to create directory "
@@ -594,7 +642,7 @@
             }
             closedir(SUBDIR);
         } else { 
-            print "$prefix Copying file " . 
+            print STDERR "$prefix Copying file " . 
                 "'$backup_dir/$file'\n";
             system("cp -p '$backup_dir/$file' '$orig_datadir'")
                 and Die "Failed to copy file '$file': $!";
@@ -603,13 +651,13 @@
     closedir(DIR);
 
     # copy InnoDB data files to original InnoDB data directory
-    print "\n$prefix Starting to copy InnoDB tables and indexes\n";
-    print "$prefix in '$backup_dir'\n";
-    print "$prefix back to original InnoDB data directory '$orig_ibdata_dir'\n";
+    print STDERR "\n$prefix Starting to copy InnoDB tables and indexes\n";
+    print STDERR "$prefix in '$backup_dir'\n";
+    print STDERR "$prefix back to original InnoDB data directory '$orig_ibdata_dir'\n";
     foreach my $a (split(/;/, $orig_innodb_data_file_path)) {
         # get the relative pathname of a data file
         my $path = (split(/:/,$a))[0];
-        print "$prefix Copying file '$backup_dir/$path'\n";
+        print STDERR "$prefix Copying file '$backup_dir/$path'\n";
         system("cp -p '$backup_dir/$path' '$orig_ibdata_dir/$path'")
             and Die "Failed to copy file '$path': $!";
     }
@@ -617,19 +665,19 @@
     # copy InnoDB log files to original InnoDB log directory
     opendir(DIR, $backup_dir) 
         || Die "Can't open directory '$backup_dir': $!\n";
-    print "\n$prefix Starting to copy InnoDB log files\n";
-    print "$prefix in '$backup_dir'\n";
-    print "$prefix back to original InnoDB log directory '$orig_iblog_dir'\n";
+    print STDERR "\n$prefix Starting to copy InnoDB log files\n";
+    print STDERR "$prefix in '$backup_dir'\n";
+    print STDERR "$prefix back to original InnoDB log directory '$orig_iblog_dir'\n";
     while (defined($file = readdir(DIR))) {
         if ($file =~ /$iblog_files/ && -f "$backup_dir/$file") {
-            print "$prefix Copying file '$backup_dir/$file'\n";
+            print STDERR "$prefix Copying file '$backup_dir/$file'\n";
             system("cp -p '$backup_dir/$file' '$orig_iblog_dir'")
                 and Die "Failed to copy file '$file': $!";
         }
     }
     closedir(DIR);
 
-    print "$prefix Finished copying back files.\n\n";
+    print STDERR "$prefix Finished copying back files.\n\n";
 }
 
 
@@ -640,24 +688,34 @@
 sub apply_log {
     my $rcode;
     my $cmdline = '';
-    my $options = '--restore';
+    my $options = '--prepare';
+
+    $options = $options . " --target-dir=$backup_dir";
 
     if ($option_uncompress) {
         $options = $options . ' --uncompress';
     }
     if ($option_use_memory) {
-        $options = $options . " --use-memory $option_use_memory";
+        $options = $options . " --use-memory=$option_use_memory";
     }
 
     # run ibbackup as a child process
-    $cmdline = "$option_ibbackup_binary $options $backup_dir/backup-my.cnf";
+    $cmdline = "$option_ibbackup_binary $options";
     $now = current_time();
-    print "\n$now  $prefix Starting ibbackup with command: $cmdline\n\n";
+    print STDERR "\n$now  $prefix Starting ibbackup with command: $cmdline\n\n";
     $rcode = system("$cmdline");
     if ($rcode) {
         # failure
         Die "\n$prefix ibbackup failed";
     }
+
+    $now = current_time();
+    print STDERR "\n$now  $prefix Restarting xtrabackup with command: $cmdline\nfor creating ib_logfile*\n\n";
+    $rcode = system("$cmdline");
+    if ($rcode) {
+        # failure
+        Die "\n$prefix xtrabackup (2nd execution) failed";
+    }
 }
 
 
@@ -666,8 +724,8 @@
 # itself.
 #
 sub wait_for_ibbackup_suspend {
-    print "$prefix Waiting for ibbackup (pid=$ibbackup_pid) to suspend\n";
-    print "$prefix Suspend file '$suspend_file'\n\n";
+    print STDERR "$prefix Waiting for ibbackup (pid=$ibbackup_pid) to suspend\n";
+    print STDERR "$prefix Suspend file '$suspend_file'\n\n";
     for (;;) {
         sleep 2;
         last if -e $suspend_file;
@@ -679,7 +737,7 @@
         }
     }
     $now = current_time();
-    print "\n$now  $prefix Continuing after ibbackup has suspended\n";
+    print STDERR "\n$now  $prefix Continuing after ibbackup has suspended\n";
 }
 
 
@@ -688,7 +746,7 @@
 # by deleting the 'ibbackup_suspended' file.
 #
 sub resume_ibbackup {
-    print "$prefix Resuming ibbackup\n\n";
+    print STDERR "$prefix Resuming ibbackup\n\n";
     unlink $suspend_file || Die "Failed to delete '$suspend_file': $!";
 
     # wait for ibbackup to finish
@@ -702,34 +760,142 @@
 # program for backing up InnoDB tables and indexes.
 #
 sub start_ibbackup {
-    my $options = '--suspend-at-end';
+    my $options = '--backup --suspend-at-end';
     my $cmdline = '';
     my $pid = undef;
 
+    if (!$option_remote_host && !$option_stream) {
+        $options = $options . " --target-dir=$backup_dir";
+    } else {
+        #(datadir) for 'xtrabackup_suspended' only
+        $options = $options . " --log-stream --target-dir=./";
+    }
+
     # prepare command line for running ibbackup
+    if ($option_throttle) {
+        $options = $options . " --throttle=$option_throttle";
+    }
     if ($option_sleep) {
-        $options = $options . " --sleep $option_sleep";
+        $options = $options . " --sleep=$option_sleep";
     }
     if ($option_compress) {
-        $options = $options . " --compress $option_compress";
+        $options = $options . " --compress=$option_compress";
     }
     if ($option_use_memory) {
-        $options = $options . " --use-memory $option_use_memory";
+        $options = $options . " --use-memory=$option_use_memory";
     }
     if ($option_include) {
-        $options = $options . " --include '$option_include'";
+        $options = $options . " --tables='$option_include'";
     }
-    $cmdline = "$option_ibbackup_binary $options $config_file "
-        ."$backup_config_file";
+    $cmdline = "$option_ibbackup_binary $options";
 
     # run ibbackup as a child process
     $now = current_time();
-    print "\n$now  $prefix Starting ibbackup with command: $cmdline\n";
+    print STDERR "\n$now  $prefix Starting ibbackup with command: $cmdline\n";
     if (defined($pid = fork)) {
         if ($pid) {
             # parent process
             $ibbackup_pid = $pid;
+
+            if($option_remote_host || $option_stream) {
+                #direct copy to remote
+                my $orig_datadir = get_option(\%config, 'mysqld', 'datadir');
+                my $orig_ibdata_dir =
+                    get_option(\%config, 'mysqld', 'innodb_data_home_dir');
+                my $orig_innodb_data_file_path =
+                    get_option(\%config, 'mysqld', 'innodb_data_file_path');
+                my $subdir;
+                my @list;
+
+                if($option_remote_host) {
+                    if (system("ssh $option_remote_host test -e $backup_dir/ib_logfile0")
+                            == 0) {
+                        print STDERR "$prefix Remove $option_remote_host:$backup_dir/ib_logfile*\n";
+                        system("ssh $option_remote_host rm $backup_dir/ib_logfile\*")
+                            and Die "Failed to rm file '$backup_dir/ib_logfile*': $!";
+                    }
+                }
+
+                wait_for_ibbackup_suspend();
+
+                #InnoDB data files from original InnoDB data directory
+                print STDERR "\n$prefix Starting to backup InnoDB tables and indexes\n";
+                if($option_remote_host) {
+                    print STDERR "$prefix to '$backup_dir'\n";
+                }
+                print STDERR "$prefix from original InnoDB data directory '$orig_ibdata_dir'\n";
+                foreach my $a (split(/;/, $orig_innodb_data_file_path)) {
+                    my $path = (split(/:/,$a))[0];
+                    if($option_remote_host) {
+                        print STDERR "$prefix Backing up file '$orig_ibdata_dir/$path'\n";
+                        system("scp -Cp -c arcfour '$orig_ibdata_dir/$path' '$option_remote_host:$backup_dir/$path'")
+                            and Die "Failed to scp file '$path': $!";
+                    } elsif($option_stream eq 'tar') {
+                        print STDERR "$prefix Backing up as tar stream '$path'\n";
+                        system("cd $orig_ibdata_dir; tar cf - $path")
+                            and Die "Failed to stream '$path': $!";
+                    }
+                }
+
+                #copy *.ibd files
+                opendir(DIR, $orig_datadir)
+                    || Die "Can't open directory '$orig_datadir': $!\n";
+                while (defined($subdir = readdir(DIR))) {
+                    my $print_each_file = 0;
+                    my $file_c;
+                    my $file;
+                    if ($subdir eq '.' || $subdir eq '..') { next; }
+                    next unless -d "$orig_datadir/$subdir";
+                    next unless check_if_required($subdir);
+
+                    @list = glob("$orig_datadir/$subdir/" . '*.ibd');
+
+                    $file_c = @list;
+                    if ($file_c <= $backup_file_print_limit) {
+                        $print_each_file = 1;
+                    } else {
+                        print STDERR "$prefix Backing up files " .
+                            "'$orig_datadir/$subdir/*.ibd' ($file_c files)\n";
+                    }
+                    foreach $file (@list) {
+                        if($option_include) {
+                            my $table_name;
+
+                            $table_name = substr($file, rindex($file, '/'));
+                            $table_name = substr($table_name, 1, rindex($table_name, '.') - 1);
+                            $table_name = $subdir . "." . $table_name;
+
+                            if (!($table_name =~ /$option_include/)) {
+                                print STDERR "'$file' is skipped.\n";
+                                next;
+                            }
+                        }
+
+                        if ($print_each_file) {
+                            print STDERR "$prefix Backing up file '$file'\n";
+                        }
+                        if($option_remote_host) {
+                            if (system("ssh $option_remote_host test -e $backup_dir/$subdir")
+                                    != 0) {
+                                system("ssh $option_remote_host mkdir $backup_dir/$subdir");
+                            }
+                            system("scp -Cp -c arcfour '$file' '$option_remote_host:$backup_dir/$subdir/'")
+                                and Die "Failed to scp file '$file': $!";
+                        } elsif($option_stream eq 'tar') {
+                            my $file_name = substr($file, rindex($file, '/') + 1);
+                            system("cd $orig_datadir; tar cf - $subdir/$file_name")
+                                and Die "Failed to stream '$subdir/$file_name': $!";
+                        }
+                    }
+                }
+                closedir(DIR);
+            }
         } else {
+            if($option_remote_host || $option_stream) {
+                open(STDOUT, "> $tmp_logfile")
+                || Die "Failed to open file '$tmp_logfile': $!"
+            }
+
             # child process
             exec($cmdline) || Die "Failed to exec ibbackup: $!";
         }
@@ -772,11 +938,11 @@
     my $options = get_mysql_options();
     # run mysql as a child process with a pipe connection
     $now = current_time();
-    print "$now  $prefix Starting mysql with options: $options\n";
+    print STDERR "$now  $prefix Starting mysql with options: $options\n";
     $mysql_pid = open(*MYSQL_WRITER, "| mysql $options >$mysql_stdout 2>$mysql_stderr ") or Die "Failed to spawn mysql child process: $!";
     MYSQL_WRITER->autoflush(1);
     $now = current_time();
-    print "$now  $prefix Connected to database with mysql child process (pid=$mysql_pid)\n";
+    print STDERR "$now  $prefix Connected to database with mysql child process (pid=$mysql_pid)\n";
 
     mysql_check();
 }
@@ -864,7 +1030,7 @@
 sub mysql_close {
     print MYSQL_WRITER "quit\n";
     $now = current_time();
-    print "$now  $prefix Connection to database server closed\n";
+    print STDERR "$now  $prefix Connection to database server closed\n";
     $mysql_pid = '';
 }
 
@@ -897,11 +1063,22 @@
     if (!defined $info_lines[1]) {
         $info_lines[1] = "";
     }
-    open(FILE, ">$binlog_info") || 
-        Die "Failed to open file '$binlog_info': $!";
+    if (!$option_remote_host) {
+        open(FILE, ">$binlog_info") || 
+            Die "Failed to open file '$binlog_info': $!";
+    } else {
+        open(FILE, "| ssh $option_remote_host 'cat > $binlog_info'") ||
+            Die "Failed to open file '$option_remote_host:$binlog_info': $!";
+    }
     print FILE  "$info_lines[1]\n";
     close(FILE);
 
+    if ($option_stream eq 'tar') {
+        system("cd $option_tmpdir; tar cf - xtrabackup_binlog_info")
+            and Die "Failed to stream 'xtrabackup_binlog_info': $!";
+        unlink $binlog_info || Die "Failed to delete '$binlog_info': $!";
+    }
+
     # get the name of the last binlog file and position in it
     ($filename, $position) = $info_lines[1] =~ /^\s*([^\s]+)\s+(.*)$/;
 
@@ -939,11 +1116,22 @@
     }
 
     # print slave status to a file
-    open(FILE, ">$slave_info") || 
-        Die "Failed to open file '$slave_info': $!";
+    if (!$option_remote_host) {
+        open(FILE, ">$slave_info") || 
+            Die "Failed to open file '$slave_info': $!";
+    } else {
+        open(FILE, "| ssh $option_remote_host 'cat > $slave_info'") ||
+            Die "Failed to open file '$option_remote_host:$slave_info': $!";
+    }
     print FILE  "CHANGE MASTER TO MASTER_LOG_FILE='$filename', MASTER_LOG_POS=$position\n";
     close(FILE);
 
+    if ($option_stream eq 'tar') {
+        system("cd $option_tmpdir; tar cf - xtrabackup_slave_info")
+            and Die "Failed to stream 'xtrabackup_slave_info': $!";
+        unlink $slave_info || Die "Failed to delete '$slave_info': $!";
+    }
+
     $mysql_slave_position = "master host '$master', filename '$filename', position $position";
 }
 
@@ -953,7 +1141,7 @@
 # 
 sub mysql_lockall {
     $now = current_time();
-    print "$now  $prefix Starting to lock all tables...\n";
+    print STDERR "$now  $prefix Starting to lock all tables...\n";
 
     mysql_send "USE mysql;";
     mysql_send "DROP TABLE IF EXISTS ibbackup_binlog_marker;";
@@ -980,7 +1168,7 @@
     write_slave_info if $option_slave_info;
 	
     $now = current_time();
-    print "$now  $prefix All tables locked and flushed to disk\n";
+    print STDERR "$now  $prefix All tables locked and flushed to disk\n";
 }
 
 
@@ -993,7 +1181,7 @@
     mysql_send "DROP TABLE IF EXISTS ibbackup_binlog_marker;";
 
     $now = current_time();
-    print "$now  $prefix All tables unlocked\n";
+    print STDERR "$now  $prefix All tables unlocked\n";
 }
 
 
@@ -1006,7 +1194,7 @@
     if ($mysql_pid && (-1 == ($rcode = waitpid($mysql_pid, &WNOHANG))
                        || $rcode == $mysql_pid)) {
         my $reason = `cat $mysql_stderr`;
-        print "Pipe to mysql child process broken: $reason at";
+        print STDERR "Pipe to mysql child process broken: $reason at";
         system("date +'%H:%M:%S'");
         exit(1);
     } else {
@@ -1077,7 +1265,7 @@
     my $stdout = `cat $tmp_stdout`;
     unlink $tmp_stdout;
     @lines = split(/\n|;/,$stdout);
-    print "$prefix Using $lines[0]\n";
+    print STDERR "$prefix Using $lines[0]\n";
 
     # get version string from the first output line of the program
     ${$version_ref} = '';
@@ -1150,9 +1338,9 @@
     } else {
         $run = 'apply-log';
     }
-    print "IMPORTANT: Please check that the $run run completes successfully.\n";
-    print "           At the end of a successful $run run innobackup\n";
-    print "           prints \"innobackup completed OK!\".\n\n";
+    print STDERR "IMPORTANT: Please check that the $run run completes successfully.\n";
+    print STDERR "           At the end of a successful $run run innobackup\n";
+    print STDERR "           prints \"innobackup completed OK!\".\n\n";
 
     # check that MySQL client program and InnoDB Hot Backup program
     # are runnable via shell
@@ -1172,11 +1360,11 @@
             @lines = split('\n', 
                            `echo "select \@\@version;" | mysql $options`);
             $mysql_server_version = $lines[1];
-            print "$prefix Using mysql server version $mysql_server_version\n";
+            print STDERR "$prefix Using mysql server version $mysql_server_version\n";
         }
-        require_external($option_ibbackup_binary, '--license', 
-                         'version (\S+)', \$ibbackup_version);
-        print "\n";
+        #require_external($option_ibbackup_binary, '--license', 
+        #                 'version (\S+)', \$ibbackup_version);
+        print STDERR "\n";
         
         if ($option_include 
             && $ibbackup_version 
@@ -1193,26 +1381,51 @@
     $SIG{PIPE} = \&catch_sigpipe;
 
     # read MySQL options file
-    read_config_file($config_file, \%config);
+    #read_config_file($config_file, \%config);
+    read_config_file(\%config);
+
+    if(!$option_tmpdir) {
+        $option_tmpdir = get_option(\%config, 'mysqld', 'tmpdir');
+    }
 
     # get innodb log home directory from options file
-    $innodb_log_group_home_dir = 
-        get_option(\%config, 'mysqld', 'innodb_log_group_home_dir');
+    #$innodb_log_group_home_dir = 
+    #    get_option(\%config, 'mysqld', 'innodb_log_group_home_dir');
 
     if (!$option_apply_log && !$option_copy_back) {
         # we are making a backup, create a new backup directory
-        $backup_dir = make_backup_dir();
-        print "$prefix Created backup directory $backup_dir\n";
+        if (!$option_remote_host) {
+            $backup_dir = File::Spec->rel2abs(make_backup_dir());
+        } else {
+            $backup_dir = make_backup_dir();
+        }
+        print STDERR "$prefix Created backup directory $backup_dir\n";
+        if (!$option_remote_host && !$option_stream) {
         $backup_config_file = $backup_dir . '/backup-my.cnf';
-        write_backup_config_file($backup_config_file);
-        $suspend_file = $backup_dir . '/ibbackup_suspended';
+        $suspend_file = $backup_dir . '/xtrabackup_suspended';
         $mysql_stdout = $backup_dir . '/mysql-stdout';
         $mysql_stderr = $backup_dir . '/mysql-stderr';
-        $binlog_info = $backup_dir . '/ibbackup_binlog_info';
-        $slave_info = $backup_dir . '/ibbackup_slave_info';
+        $binlog_info = $backup_dir . '/xtrabackup_binlog_info';
+        $slave_info = $backup_dir . '/xtrabackup_slave_info';
+        } else {
+        $suspend_file = get_option(\%config, 'mysqld', 'datadir') . '/xtrabackup_suspended';
+        $tmp_logfile = $option_tmpdir . '/xtrabackup_logfile';
+        $mysql_stdout = $option_tmpdir . '/mysql-stdout';
+        $mysql_stderr = $option_tmpdir . '/mysql-stderr';
+        if ($option_stream) {
+            $backup_config_file = $option_tmpdir . '/backup-my.cnf';
+            $binlog_info = $option_tmpdir . '/xtrabackup_binlog_info';
+            $slave_info = $option_tmpdir . '/xtrabackup_slave_info';
+        } else {
+            $backup_config_file = $backup_dir . '/backup-my.cnf';
+            $binlog_info = $backup_dir . '/xtrabackup_binlog_info';
+            $slave_info = $backup_dir . '/xtrabackup_slave_info';
+        }
+        }
+        write_backup_config_file($backup_config_file);
     } elsif ($option_copy_back) {
-        $backup_config_file = $backup_dir . '/backup-my.cnf';
-        read_config_file($backup_config_file, \%backup_config);
+        #$backup_config_file = $backup_dir . '/backup-my.cnf';
+        #read_config_file($backup_config_file, \%backup_config);
     }         
 }
 
@@ -1232,18 +1445,37 @@
         get_option(\%config, 'mysqld', 'innodb_log_files_in_group');
     my $innodb_log_file_size =
         get_option(\%config, 'mysqld', 'innodb_log_file_size');
+    my $root;
+
+    if (!$option_remote_host) {
+        $root = $backup_dir;
+        open(FILE, "> $filename") || Die "Failed to open file '$filename': $!";
+    } else {
+        $root = `ssh $option_remote_host 'cd $backup_dir; pwd'`;
+        open(FILE, "| ssh $option_remote_host 'cat > $filename'")
+            || Die "Failed to open file '$option_remote_host:$filename': $!";
+    }
 
-    open(FILE, "> $filename") || Die "Failed to open file '$filename': $!";
     print FILE "# This MySQL options file was generated by innobackup.\n\n" .
           "# The MySQL server\n" .
           "[mysqld]\n" .
-          "datadir=$backup_dir\n" .
-          "innodb_data_home_dir=$backup_dir\n" .
+          "datadir=$root\n" .
+          "innodb_data_home_dir=$root\n" .
           "innodb_data_file_path=$innodb_data_file_path\n" .
-          "innodb_log_group_home_dir=$backup_dir\n" .
+          "innodb_log_group_home_dir=$root\n" .
           "innodb_log_files_in_group=$innodb_log_files_in_group\n" .
           "innodb_log_file_size=$innodb_log_file_size\n";
     close(FILE);
+
+    if ($option_stream) {
+        my $filename_dir = substr($filename, 0, rindex($filename, '/') - 1);
+        my $filename_name = substr($filename, rindex($filename, '/') + 1);
+        if ($option_stream eq 'tar') {
+            system("cd $filename_dir; tar cf - $filename_name")
+                and Die "Failed to stream '$filename_name': $!";
+        }
+        unlink $filename || Die "Failed to delete '$filename': $!";
+    }
 }
 
 
@@ -1262,9 +1494,9 @@
         # this perl is prior to 5.6.0 and uses old style version string
         my $required_version = $required_perl_version_old_style;
         if ($] lt $required_version) {
-            print "$prefix Warning: " . 
+            print STDERR "$prefix Warning: " . 
                 "Your perl is too old! Innobackup requires\n";
-            print "$prefix Warning: perl $required_version or newer!\n";
+            print STDERR "$prefix Warning: perl $required_version or newer!\n";
         }
     } else {
         $perl_version = chr($required_perl_version[0])
@@ -1274,9 +1506,9 @@
             my $version = chr(48 + $required_perl_version[0])
                 . "." . chr(48 + $required_perl_version[1])
                 . "." . chr(48 + $required_perl_version[2]);
-            print "$prefix Warning: " . 
+            print STDERR "$prefix Warning: " . 
                 "Your perl is too old! Innobackup requires\n";
-            print "$prefix Warning: perl $version or newer!\n";
+            print STDERR "$prefix Warning: perl $version or newer!\n";
         }
     }
 
@@ -1290,12 +1522,13 @@
     $rcode = GetOptions('compress:i' => \$option_compress,
                         'help' => \$option_help,
                         'version' => \$option_version,
+                        'throttle=i' => \$option_throttle,
                         'sleep=i' => \$option_sleep,
                         'apply-log' => \$option_apply_log,
                         'copy-back' => \$option_copy_back,
                         'include=s' => \$option_include,
 			'databases=s' => \$option_databases,
-                        'use-memory=i' => \$option_use_memory,
+                        'use-memory=s' => \$option_use_memory,
                         'uncompress' => \$option_uncompress,
                         'password=s' => \$option_mysql_password,
                         'user=s' => \$option_mysql_user,
@@ -1303,10 +1536,14 @@
                         'slave-info' => \$option_slave_info,
                         'socket=s' => \$option_mysql_socket,
                         'no-timestamp' => \$option_no_timestamp,
+                        'incremental' => \$option_incremental,
+                        'remote-host=s' => \$option_remote_host,
+                        'stream=s' => \$option_stream,
+                        'tmpdir=s' => \$option_tmpdir,
                         'ibbackup=s' => \$option_ibbackup_binary);
     if (!$rcode) {
         # failed to read options
-        print "$prefix Bad command line arguments\n";
+        print STDERR "$prefix Bad command line arguments\n";
         usage();
         exit(1);
     }
@@ -1331,28 +1568,43 @@
 	$option_compress = 0;
     }
 
-    if (@ARGV < 2) {
-        print "$prefix Missing command line argument\n";
+    if (@ARGV < 1) {
+        print STDERR "$prefix Missing command line argument\n";
         usage();
         exit(1);
-    } elsif (@ARGV > 2) {
-        print "$prefix Too many command line arguments\n";
+    } elsif (@ARGV > 1) {
+        print STDERR "$prefix Too many command line arguments\n";
         usage();
         exit(1);
     }
 
+    if ($option_stream) {
+        if ($option_stream eq 'tar') {
+        } elsif ($option_stream eq 'cpio') {
+            print STDERR "$prefix --stream=cpio is not supported yet\n";
+            exit(1);
+        } else {
+            print STDERR "$prefix Unknown option --stream=$option_stream\n";
+            exit(1);
+        }
+    }
+
     # get options file name
-    $config_file = $ARGV[0];
+    #$config_file = $ARGV[0];
 
     if (!$option_apply_log && !$option_copy_back) {
         # we are making a backup, get backup root directory
-        $backup_root = $ARGV[1];
+        $backup_root = $ARGV[0];
+        if ($option_incremental) {
+            print STDERR "incremental backup is not supported for now.\n";
+            exit(1);
+        }
     } else {
         # get backup directory
-        $backup_dir = $ARGV[1];
+        $backup_dir = File::Spec->rel2abs($ARGV[0]);
     }        
 
-    print "\n";
+    print STDERR "\n";
 
     parse_databases_option_value();
 }
@@ -1369,9 +1621,17 @@
 
     # create backup directory
     $dir = $backup_root;
+    if ($option_stream) {
+        return $dir;
+    }
+
     $dir .= '/' . strftime("%Y-%m-%d_%H-%M-%S", localtime())
        unless $option_no_timestamp;
-    mkdir($dir, 0777) || Die "Failed to create backup directory $dir: $!";
+    if (!$option_remote_host) {
+        mkdir($dir, 0777) || Die "Failed to create backup directory $dir: $!";
+    } else {
+        system("ssh $option_remote_host mkdir $dir");
+    }
 
     # create subdirectories for ibdata files if needed
     foreach my $a (split(/;/, $innodb_data_file_path)) {
@@ -1407,9 +1667,15 @@
     $path = $root;
     foreach $a (@{$relative_path}) {
         $path = $path . "/" . $a;
-        if (! -d $path) {
-            # this directory does not exist, create it !
-            mkdir($path, 0777) || Die "Failed to create backup directory: $!";
+        if (!$option_remote_host) {
+            if (! -d $path) {
+                # this directory does not exist, create it !
+                mkdir($path, 0777) || Die "Failed to create backup directory: $!";
+            }
+        } else {
+            if (system("ssh $option_remote_host test -d $path") != 0) {
+                system("ssh $option_remote_host mkdir $path");
+            }
         }
     }
 }
@@ -1451,9 +1717,9 @@
     opendir(DIR, $source_dir) 
         || Die "Can't open directory '$source_dir': $!\n";
     $now = current_time();
-    print "\n$now  $prefix Starting to backup .frm, .MRG, .MYD, .MYI,\n";
-    print "$prefix .TRG, .TRN, and .opt files in\n";
-    print "$prefix subdirectories of '$source_dir'\n";
+    print STDERR "\n$now  $prefix Starting to backup .frm, .MRG, .MYD, .MYI,\n";
+    print STDERR "$prefix .TRG, .TRN, and .opt files in\n";
+    print STDERR "$prefix subdirectories of '$source_dir'\n";
     # loop through all database directories
     while (defined($database = readdir(DIR))) {
         my $print_each_file = 0;
@@ -1463,10 +1729,17 @@
         next unless -d "$source_dir/$database";
 	next unless check_if_required($database);
         
-        if (! -e "$backup_dir/$database") {
-            # create database directory for the backup
-            mkdir("$backup_dir/$database", 0777)
-                || Die "Couldn't create directory '$backup_dir/$database': $!";
+        if (!$option_remote_host && !$option_stream) {
+            if (! -e "$backup_dir/$database") {
+                # create database directory for the backup
+                mkdir("$backup_dir/$database", 0777)
+                    || Die "Couldn't create directory '$backup_dir/$database': $!";
+            }
+        } elsif ($option_remote_host) {
+            if (system("ssh $option_remote_host test -e $backup_dir/$database")
+                    != 0) {
+                system("ssh $option_remote_host mkdir $backup_dir/$database");
+            }
         }
 
         # copy files of this database
@@ -1476,7 +1749,7 @@
         if ($file_c <= $backup_file_print_limit) {
             $print_each_file = 1;
         } else {
-            print "$prefix Backing up files " . 
+            print STDERR "$prefix Backing up files " . 
                 "'$source_dir/$database/$wildcard' ($file_c files)\n";
         }
         foreach $file (@list) {
@@ -1486,16 +1759,25 @@
             next unless check_if_required($database, $file);
                
             if ($print_each_file) {
-                print "$prefix Backing up file '$file'\n";
+                print STDERR "$prefix Backing up file '$file'\n";
+            }
+            if (!$option_remote_host && !$option_stream) {
+                system("cp -p '$file' '$backup_dir/$database'")
+                    and Die "Failed to copy file '$file': $!";
+            } elsif ($option_remote_host) {
+                system("scp -Cp -c arcfour '$file' '$option_remote_host:$backup_dir/$database/'")
+                    and Die "Failed to scp file '$file': $!";
+            } elsif($option_stream eq 'tar') {
+                my $file_name = substr($file, rindex($file, '/') + 1);
+                system("cd $source_dir; tar cf - $database/$file_name")
+                    and Die "Failed to stream '$database/$file_name': $!";
             }
-            system("cp -p '$file' '$backup_dir/$database'")
-                and Die "Failed to copy file '$file': $!";
         }
     }
     closedir(DIR);
 
     $now = current_time();
-    print "$now  $prefix Finished backing up .frm, .MRG, .MYD, .MYI, .TRG, .TRN, and .opt files\n\n";
+    print STDERR "$now  $prefix Finished backing up .frm, .MRG, .MYD, .MYI, .TRG, .TRN, and .opt files\n\n";
 }
 
 
@@ -1576,15 +1858,20 @@
 #                   options are returned
 #
 sub read_config_file {
-    my $filename = shift;
+    #my $filename = shift;
     my $groups_ref = shift;
     my @lines ;
     my $i;
     my $group;
     my $group_hash_ref;
 
+    my $cmdline = '';
+    my $options = '--print-param';
+
     # read file to an array, one line per element
-    file_to_array($filename, \@lines);
+    #file_to_array($filename, \@lines);
+    $cmdline = "$option_ibbackup_binary $options";
+    @lines = `$cmdline`;
 
     # classify lines and save option values
     $group = 'default';
@@ -1637,7 +1924,7 @@
           # unknown
           print("$prefix: Warning: Ignored unrecognized line ",
                 $i + 1,
-                " in options file '$filename': '${lines[$i]}'\n"
+                " in options : '${lines[$i]}'\n"
                 );
       }
    }
@@ -1662,14 +1949,14 @@
 
     if (!exists $config{$group}) {
         # no group
-        print "$prefix fatal error: no '$group' group in MySQL options file '$config_file\n";
+        print STDERR "$prefix fatal error: no '$group' group in MySQL options\n";
         exit(1);
     }
     
     $group_hash_ref = ${$config_ref}{$group};
     if (!exists ${$group_hash_ref}{$option_name}) {
         # no option
-        print "$prefix fatal error: no '$option_name' option in group '$group' in MySQL options file '$config_file\n";
+        print STDERR "$prefix fatal error: no '$option_name' option in group '$group' in MySQL options\n";
         exit(1);
     }
 
