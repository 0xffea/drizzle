Testing REPLACE basic 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
INSERT INTO t1 (b) VALUES (10),(20),(30),(40),(50),(60);
REPLACE INTO t1 VALUES (1,100),(3,300);
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	638	5	5	1	5	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	75
150	TRANSACTION	201
351	TRANSACTION	171
522	TRANSACTION	116

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
150	3	1	START_TIMESTAMP	END_TIMESTAMP	1	0
351	4	1	START_TIMESTAMP	END_TIMESTAMP	1	0
522	5	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 5
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
      after_value: "100"
      is_null: false
    }
    record {
      key_value: "3"
      after_value: "300"
      is_null: false
    }
  }
}



DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing REPLACE SET
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), PRIMARY KEY(a));
INSERT INTO t1 (b,c) VALUES (10,'a'),(20,'b'),(30,'c'),(40,'d'),(50,'e'),(60,'f');
REPLACE INTO t1 SET a=1,b=42,c='I have been replaced' ;
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	701	5	5	1	5	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	75
150	TRANSACTION	209
359	TRANSACTION	208
567	TRANSACTION	134

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
150	3	1	START_TIMESTAMP	END_TIMESTAMP	1	0
359	4	1	START_TIMESTAMP	END_TIMESTAMP	1	0
567	5	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 5
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
    set_field_metadata {
      type: VARCHAR
      name: "c"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
      after_value: "42"
      after_value: "I have been replaced"
      is_null: false
      is_null: false
    }
  }
}



DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing REPLACE...SELECT 
DROP TABLE IF EXISTS t1, t2 ;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), d CHAR(20), PRIMARY KEY(a));
INSERT INTO t1 (b,c,d) VALUES (10,'a','f'),(20,'b','e'),(30,'c','d'),(40,'d','c'),(50,'e','b'),(60,'f','a');
CREATE TABLE t2 LIKE t1;
INSERT INTO t2  SELECT a, b*20, CONCAT(c,'replace'), CONCAT(d, 'replace_too') FROM t1;
REPLACE INTO t1 SELECT * FROM t2;
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	1596	7	7	1	7	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	75
150	TRANSACTION	243
393	TRANSACTION	246
639	TRANSACTION	245
884	TRANSACTION	362
1246	TRANSACTION	350

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
150	3	1	START_TIMESTAMP	END_TIMESTAMP	1	0
393	4	1	START_TIMESTAMP	END_TIMESTAMP	1	0
639	5	1	START_TIMESTAMP	END_TIMESTAMP	1	0
884	6	1	START_TIMESTAMP	END_TIMESTAMP	1	0
1246	7	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 7
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
    set_field_metadata {
      type: VARCHAR
      name: "c"
    }
    set_field_metadata {
      type: VARCHAR
      name: "d"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
      after_value: "200"
      after_value: "areplace"
      after_value: "freplace_too"
      is_null: false
      is_null: false
      is_null: false
    }
    record {
      key_value: "2"
      after_value: "400"
      after_value: "breplace"
      after_value: "ereplace_too"
      is_null: false
      is_null: false
      is_null: false
    }
    record {
      key_value: "3"
      after_value: "600"
      after_value: "creplace"
      after_value: "dreplace_too"
      is_null: false
      is_null: false
      is_null: false
    }
    record {
      key_value: "4"
      after_value: "800"
      after_value: "dreplace"
      after_value: "creplace_too"
      is_null: false
      is_null: false
      is_null: false
    }
    record {
      key_value: "5"
      after_value: "1000"
      after_value: "ereplace"
      after_value: "breplace_too"
      is_null: false
      is_null: false
      is_null: false
    }
    record {
      key_value: "6"
      after_value: "1200"
      after_value: "freplace"
      after_value: "areplace_too"
      is_null: false
      is_null: false
      is_null: false
    }
  }
}



DROP TABLE t1, t2;
SET GLOBAL transaction_log_truncate_debug= true;

Testing multi-row REPLACE
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), d CHAR(20), PRIMARY KEY(a), UNIQUE KEY(b), UNIQUE KEY(c));
INSERT INTO t1 (b,c,d) VALUES (10,'a','f'),(20,'b','e'),(30,'c','d'),(40,'d','c'),(50,'e','b'),(60,'f','a');
SELECT * FROM t1;
a	b	c	d
1	10	a	f
2	20	b	e
3	30	c	d
4	40	d	c
5	50	e	b
6	60	f	a
REPLACE INTO t1 VALUES (1, 20, 'd','x');
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	860	4	4	1	4	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	292
367	TRANSACTION	246
613	TRANSACTION	247

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
367	3	1	START_TIMESTAMP	END_TIMESTAMP	1	0
613	4	1	START_TIMESTAMP	END_TIMESTAMP	3	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 4
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: DELETE
  START_TIMESTAMP
  END_TIMESTAMP
  delete_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
  }
  delete_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
    }
  }
}
statement {
  type: DELETE
  START_TIMESTAMP
  END_TIMESTAMP
  delete_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
  }
  delete_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
    }
  }
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
    set_field_metadata {
      type: VARCHAR
      name: "c"
    }
    set_field_metadata {
      type: VARCHAR
      name: "d"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "4"
      after_value: "1"
      after_value: "20"
      after_value: "d"
      after_value: "x"
      is_null: false
      is_null: false
      is_null: false
      is_null: false
    }
  }
}



SELECT * FROM t1;
a	b	c	d
1	20	d	x
3	30	c	d
5	50	e	b
6	60	f	a
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

