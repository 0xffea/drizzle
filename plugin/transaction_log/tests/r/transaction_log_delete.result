Testing DELETE basic 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
INSERT INTO t1 (b) VALUES (10),(20),(30),(40),(50),(60);
DELETE FROM t1;
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	677	5	5	1	5	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	75
150	TRANSACTION	241
391	TRANSACTION	171
562	TRANSACTION	115

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
150	3	1	START_TIMESTAMP	END_TIMESTAMP	1	0
391	4	1	START_TIMESTAMP	END_TIMESTAMP	1	0
562	5	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 5
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: DELETE
  START_TIMESTAMP
  END_TIMESTAMP
  delete_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
  }
  delete_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
    }
    record {
      key_value: "2"
    }
    record {
      key_value: "3"
    }
    record {
      key_value: "4"
    }
    record {
      key_value: "5"
    }
    record {
      key_value: "6"
    }
  }
}



DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing simple DELETE with WHERE 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), PRIMARY KEY(a));
INSERT INTO t1 (b,c) VALUES (10,'a'),(20,'b'),(30,'c'),(40,'d'),(50,'e'),(60,'f');
DELETE FROM t1 WHERE a%2=0 ;
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	707	5	5	1	5	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	75
150	TRANSACTION	249
399	TRANSACTION	208
607	TRANSACTION	100

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
150	3	1	START_TIMESTAMP	END_TIMESTAMP	1	0
399	4	1	START_TIMESTAMP	END_TIMESTAMP	1	0
607	5	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 5
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: DELETE
  START_TIMESTAMP
  END_TIMESTAMP
  delete_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
  }
  delete_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
    }
    record {
      key_value: "4"
    }
    record {
      key_value: "6"
    }
  }
}



DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing simple DELETE with WHERE + LIMIT
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), PRIMARY KEY(a));
INSERT INTO t1 (b,c) VALUES (10,'a'),(20,'b'),(30,'c'),(40,'d'),(50,'e'),(60,'f');
DELETE FROM t1 WHERE a%2=0 LIMIT 1;
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	697	5	5	1	5	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	75
150	TRANSACTION	249
399	TRANSACTION	208
607	TRANSACTION	90

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
150	3	1	START_TIMESTAMP	END_TIMESTAMP	1	0
399	4	1	START_TIMESTAMP	END_TIMESTAMP	1	0
607	5	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 5
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: DELETE
  START_TIMESTAMP
  END_TIMESTAMP
  delete_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
  }
  delete_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
    }
  }
}



DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing simple DELETE with WHERE + LIMIT + ORDER BY1 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), PRIMARY KEY(a));
INSERT INTO t1 (b,c) VALUES (10,'a'),(20,'b'),(30,'c'),(40,'d'),(50,'e'),(60,'f');
DELETE FROM t1 WHERE a%2=0 ORDER BY a DESC LIMIT 1;
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	697	5	5	1	5	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	75
150	TRANSACTION	249
399	TRANSACTION	208
607	TRANSACTION	90

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
150	3	1	START_TIMESTAMP	END_TIMESTAMP	1	0
399	4	1	START_TIMESTAMP	END_TIMESTAMP	1	0
607	5	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 5
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: DELETE
  START_TIMESTAMP
  END_TIMESTAMP
  delete_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
  }
  delete_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "6"
    }
  }
}



DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing simple DELETE with WHERE + LIMIT + ORDER BY2
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), PRIMARY KEY(a));
INSERT INTO t1 (b,c) VALUES (10,'a'),(20,'b'),(30,'c'),(40,'d'),(50,'e'),(60,'f');
DELETE FROM t1 WHERE a%2=0 ORDER BY a DESC LIMIT 10000;
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	707	5	5	1	5	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	75
150	TRANSACTION	249
399	TRANSACTION	208
607	TRANSACTION	100

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
150	3	1	START_TIMESTAMP	END_TIMESTAMP	1	0
399	4	1	START_TIMESTAMP	END_TIMESTAMP	1	0
607	5	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 5
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: DELETE
  START_TIMESTAMP
  END_TIMESTAMP
  delete_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
  }
  delete_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "6"
    }
    record {
      key_value: "4"
    }
    record {
      key_value: "2"
    }
  }
}



DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing DELETE - Foreign Key constraints CASCADE
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2(a INT NOT NULL AUTO_INCREMENT, b INT , PRIMARY KEY(a), KEY b_key (b),
CONSTRAINT fk_constraint_t2 FOREIGN KEY (b) REFERENCES t1(b) ON DELETE CASCADE ON UPDATE CASCADE);
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
DELETE FROM t1 WHERE b%2=0;
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	1278	7	7	1	7	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	75
150	TRANSACTION	241
391	TRANSACTION	278
669	TRANSACTION	246
915	TRANSACTION	246
1161	TRANSACTION	117

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
150	3	1	START_TIMESTAMP	END_TIMESTAMP	1	0
391	4	1	START_TIMESTAMP	END_TIMESTAMP	1	0
669	5	1	START_TIMESTAMP	END_TIMESTAMP	1	0
915	6	1	START_TIMESTAMP	END_TIMESTAMP	1	0
1161	7	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 7
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: DELETE
  START_TIMESTAMP
  END_TIMESTAMP
  delete_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
  }
  delete_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
    }
    record {
      key_value: "4"
    }
    record {
      key_value: "6"
    }
    record {
      key_value: "8"
    }
    record {
      key_value: "10"
    }
    record {
      key_value: "11"
    }
  }
}



DROP TABLE t2;
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

SET GLOBAL transaction_log_truncate_debug= true;

Testing DELETE - Foreign Key constraints SET NULL 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2(a INT NOT NULL AUTO_INCREMENT, b INT , PRIMARY KEY(a), KEY b_key (b),
CONSTRAINT fk_constraint_t2 FOREIGN KEY (b) REFERENCES t1(b) ON DELETE SET NULL ON UPDATE CASCADE);
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
DELETE FROM t1 WHERE b%2=0;
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	1278	7	7	1	7	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	75
150	TRANSACTION	241
391	TRANSACTION	278
669	TRANSACTION	246
915	TRANSACTION	246
1161	TRANSACTION	117

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
150	3	1	START_TIMESTAMP	END_TIMESTAMP	1	0
391	4	1	START_TIMESTAMP	END_TIMESTAMP	1	0
669	5	1	START_TIMESTAMP	END_TIMESTAMP	1	0
915	6	1	START_TIMESTAMP	END_TIMESTAMP	1	0
1161	7	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 7
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: DELETE
  START_TIMESTAMP
  END_TIMESTAMP
  delete_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
  }
  delete_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
    }
    record {
      key_value: "4"
    }
    record {
      key_value: "6"
    }
    record {
      key_value: "8"
    }
    record {
      key_value: "10"
    }
    record {
      key_value: "11"
    }
  }
}



DROP TABLE t2;
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

SET GLOBAL transaction_log_truncate_debug= true;

Testing DELETE - Foreign Key constraints CASCADE
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2(a INT NOT NULL AUTO_INCREMENT, b INT , PRIMARY KEY(a), KEY b_key (b),
CONSTRAINT fk_constraint_t2 FOREIGN KEY (b) REFERENCES t1(b) ON DELETE RESTRICT ON UPDATE CASCADE);
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
DELETE FROM t1 WHERE b%2=0;
ERROR 23000: Cannot delete or update a parent row: a foreign key constraint fails (`test`.`t2`, CONSTRAINT `fk_constraint_t2` FOREIGN KEY (`b`) REFERENCES `t1` (`b`) ON UPDATE CASCADE)
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	1161	6	6	1	6	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	75
150	TRANSACTION	241
391	TRANSACTION	278
669	TRANSACTION	246
915	TRANSACTION	246

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
150	3	1	START_TIMESTAMP	END_TIMESTAMP	1	0
391	4	1	START_TIMESTAMP	END_TIMESTAMP	1	0
669	5	1	START_TIMESTAMP	END_TIMESTAMP	1	0
915	6	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 6
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t2"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "1"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "2"
      insert_value: "2"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "3"
      insert_value: "3"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "4"
      insert_value: "4"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "5"
      insert_value: "5"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "6"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "7"
      insert_value: "7"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "8"
      insert_value: "8"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "9"
      insert_value: "9"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "10"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "11"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "12"
      insert_value: "101"
      is_null: false
      is_null: false
    }
  }
}



DROP TABLE t2;
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing DELETE basic2 
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (
id INT NOT NULL
, padding VARCHAR(200) NOT NULL
, PRIMARY KEY (id)
);
INSERT INTO t1 VALUES (1, "I love testing.");
INSERT INTO t1 VALUES (2, "I hate testing.");
DELETE FROM t1 where id = 1;
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	658	5	5	1	5	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	242
317	TRANSACTION	125
442	TRANSACTION	125
567	TRANSACTION	91

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
317	3	1	START_TIMESTAMP	END_TIMESTAMP	1	0
442	4	1	START_TIMESTAMP	END_TIMESTAMP	1	0
567	5	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 5
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: DELETE
  START_TIMESTAMP
  END_TIMESTAMP
  delete_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "id"
    }
  }
  delete_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
    }
  }
}



DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing DELETE / TRUNCATE optimization
CREATE TABLE t1 (
id INT NOT NULL
, other INT NOT NULL
, PRIMARY KEY (id)
);
INSERT INTO t1 VALUES (1, 1);
INSERT INTO t1 VALUES (2, 2);
INSERT INTO t1 VALUES (3, 3);
INSERT INTO t1 VALUES (4, 4);
INSERT INTO t1 VALUES (5, 5);
INSERT INTO t1 VALUES (6, 6);
INSERT INTO t1 VALUES (7, 7);
INSERT INTO t1 VALUES (8, 8);
This should produce a TRUNCATE event
DELETE FROM t1;
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	1214	10	10	1	10	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	216
216	TRANSACTION	109
325	TRANSACTION	109
434	TRANSACTION	109
543	TRANSACTION	109
652	TRANSACTION	109
761	TRANSACTION	109
870	TRANSACTION	109
979	TRANSACTION	109
1088	TRANSACTION	126

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
216	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
325	3	1	START_TIMESTAMP	END_TIMESTAMP	1	0
434	4	1	START_TIMESTAMP	END_TIMESTAMP	1	0
543	5	1	START_TIMESTAMP	END_TIMESTAMP	1	0
652	6	1	START_TIMESTAMP	END_TIMESTAMP	1	0
761	7	1	START_TIMESTAMP	END_TIMESTAMP	1	0
870	8	1	START_TIMESTAMP	END_TIMESTAMP	1	0
979	9	1	START_TIMESTAMP	END_TIMESTAMP	1	0
1088	10	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 10
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: DELETE
  START_TIMESTAMP
  END_TIMESTAMP
  delete_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "id"
    }
  }
  delete_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
    }
    record {
      key_value: "2"
    }
    record {
      key_value: "3"
    }
    record {
      key_value: "4"
    }
    record {
      key_value: "5"
    }
    record {
      key_value: "6"
    }
    record {
      key_value: "7"
    }
    record {
      key_value: "8"
    }
  }
}



DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing DELETE Bug#496101
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (
id INT NOT NULL
, padding VARCHAR(200) NOT NULL
, PRIMARY KEY (id)
);
START TRANSACTION;
INSERT INTO t1 VALUES (1, "I love testing.");
INSERT INTO t1 VALUES (2, "I hate testing.");
DELETE FROM t1 where id = 1;
COMMIT;
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	523	3	3	1	3	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	242
317	TRANSACTION	206

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
317	3	1	START_TIMESTAMP	END_TIMESTAMP	2	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 3
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "id"
    }
    field_metadata {
      type: VARCHAR
      name: "padding"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "I love testing."
      is_null: false
      is_null: false
    }
    record {
      insert_value: "2"
      insert_value: "I hate testing."
      is_null: false
      is_null: false
    }
  }
}
statement {
  type: DELETE
  START_TIMESTAMP
  END_TIMESTAMP
  delete_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "id"
    }
  }
  delete_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
    }
  }
}



DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

