Testing simple DROP 
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(a INT NOT NULL, PRIMARY KEY(a));
DROP TABLE t1;
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	350	3	3	1	3	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	200
275	TRANSACTION	75

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
275	3	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 3
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: DROP_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  drop_table_statement {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    if_exists_clause: false
  }
}



SET GLOBAL transaction_log_truncate_debug= true;

Testing multi-table DROP
DROP TABLE IF EXISTS t1, t2, t3;
CREATE TABLE t1(a INT NOT NULL, PRIMARY KEY(a));
CREATE TABLE t2 LIKE t1;
CREATE TABLE t3 LIKE t2;
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	75
150	TRANSACTION	75
225	TRANSACTION	200
425	TRANSACTION	202
627	TRANSACTION	202
DROP TABLE t1, t2, t3;
Check DROP TABLE t1
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(SELECT entry_offset FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS WHERE TRANSACTION_ID = 7));
PRINT_TRANSACTION_MESSAGE('transaction.log',(SELECT entry_offset FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS WHERE TRANSACTION_ID = 7))
transaction_context {
  server_id: 1
  transaction_id: 7
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: DROP_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  drop_table_statement {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    if_exists_clause: false
  }
}

Check DROP TABLE t2
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(SELECT entry_offset FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS WHERE TRANSACTION_ID = 8));
PRINT_TRANSACTION_MESSAGE('transaction.log',(SELECT entry_offset FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS WHERE TRANSACTION_ID = 8))
transaction_context {
  server_id: 1
  transaction_id: 8
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: DROP_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  drop_table_statement {
    table_metadata {
      schema_name: "test"
      table_name: "t2"
    }
    if_exists_clause: false
  }
}

Check DROP TABLE t3
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	1054	9	9	1	9	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	75
150	TRANSACTION	75
225	TRANSACTION	200
425	TRANSACTION	202
627	TRANSACTION	202
829	TRANSACTION	75
904	TRANSACTION	75
979	TRANSACTION	75

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
150	3	1	START_TIMESTAMP	END_TIMESTAMP	1	0
225	4	1	START_TIMESTAMP	END_TIMESTAMP	1	0
425	5	1	START_TIMESTAMP	END_TIMESTAMP	1	0
627	6	1	START_TIMESTAMP	END_TIMESTAMP	1	0
829	7	1	START_TIMESTAMP	END_TIMESTAMP	1	0
904	8	1	START_TIMESTAMP	END_TIMESTAMP	1	0
979	9	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 9
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: DROP_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  drop_table_statement {
    table_metadata {
      schema_name: "test"
      table_name: "t3"
    }
    if_exists_clause: false
  }
}



SET GLOBAL transaction_log_truncate_debug= true;

Testing DROP IF EXISTS positive
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(a INT NOT NULL, PRIMARY KEY(a));
DROP TABLE IF EXISTS t1;
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	350	3	3	1	3	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	200
275	TRANSACTION	75

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
275	3	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 3
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: DROP_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  drop_table_statement {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    if_exists_clause: true
  }
}



SET GLOBAL transaction_log_truncate_debug= true;

Testing DROP IF EXISTS negative
DROP TABLE IF EXISTS t1;
Warnings:
Note	1051	Unknown table 't1'
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	75	1	1	1	1	START_TIMESTAMP	END_TIMESTAMP	INDEX_SIZE

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 1
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: DROP_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  drop_table_statement {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    if_exists_clause: true
  }
}



SET GLOBAL transaction_log_truncate_debug= true;

