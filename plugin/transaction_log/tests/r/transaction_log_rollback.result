SET @OLD_AUTO_COMMIT = @@AUTOCOMMIT;
SET AUTOCOMMIT = 0;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(a INT NOT NULL, PRIMARY KEY(a));
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);
ROLLBACK;
START TRANSACTION;
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);
ROLLBACK;
INSERT INTO t1 VALUES (1);
SAVEPOINT `savept1`;
INSERT INTO t1 VALUES (2);
ROLLBACK TO SAVEPOINT savept1;
COMMIT;
# check transaction_log
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG;
FILE_NAME	FILE_LENGTH	NUM_LOG_ENTRIES	NUM_TRANSACTIONS	MIN_TRANSACTION_ID	MAX_TRANSACTION_ID	MIN_END_TIMESTAMP	MAX_END_TIMESTAMP	INDEX_SIZE_IN_BYTES
transaction.log	324	3	3	1	5	START_TIMESTAMP	END_TIMESTAMP	73736

Check transaction_log_entries
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
ENTRY_OFFSET	ENTRY_TYPE	ENTRY_LENGTH
0	TRANSACTION	75
75	TRANSACTION	157
232	TRANSACTION	92

Check transaction_log_transactions
SELECT * FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
ENTRY_OFFSET	TRANSACTION_ID	SERVER_ID	START_TIMESTAMP	END_TIMESTAMP	NUM_STATEMENTS	CHECKSUM
0	1	1	START_TIMESTAMP	END_TIMESTAMP	1	0
75	2	1	START_TIMESTAMP	END_TIMESTAMP	1	0
232	5	1	START_TIMESTAMP	END_TIMESTAMP	1	0
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  transaction_id: 5
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      is_null: false
    }
  }
}



DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

SET AUTOCOMMIT = @OLD_AUTO_COMMIT;
