// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "resultset.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace drizzled {
namespace message {

namespace {

const ::google::protobuf::Descriptor* FieldMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resultset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resultset_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_resultset_2eproto() {
  protobuf_AddDesc_resultset_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "resultset.proto");
  GOOGLE_CHECK(file != NULL);
  FieldMeta_descriptor_ = file->message_type(0);
  static const int FieldMeta_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMeta, field_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMeta, field_alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMeta, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMeta, table_alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMeta, schema_name_),
  };
  FieldMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FieldMeta_descriptor_,
      FieldMeta::default_instance_,
      FieldMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FieldMeta));
  TableMeta_descriptor_ = file->message_type(1);
  static const int TableMeta_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMeta, schema_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMeta, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMeta, table_alias_),
  };
  TableMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableMeta_descriptor_,
      TableMeta::default_instance_,
      TableMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableMeta));
  SelectRecord_descriptor_ = file->message_type(2);
  static const int SelectRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRecord, record_value_),
  };
  SelectRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectRecord_descriptor_,
      SelectRecord::default_instance_,
      SelectRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectRecord));
  SelectHeader_descriptor_ = file->message_type(3);
  static const int SelectHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectHeader, table_meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectHeader, field_meta_),
  };
  SelectHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectHeader_descriptor_,
      SelectHeader::default_instance_,
      SelectHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectHeader));
  SelectData_descriptor_ = file->message_type(4);
  static const int SelectData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectData, segment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectData, end_segment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectData, record_),
  };
  SelectData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectData_descriptor_,
      SelectData::default_instance_,
      SelectData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectData));
  Resultset_descriptor_ = file->message_type(5);
  static const int Resultset_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resultset, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resultset, schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resultset, sql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resultset, select_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resultset, select_data_),
  };
  Resultset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resultset_descriptor_,
      Resultset::default_instance_,
      Resultset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resultset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resultset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resultset));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_resultset_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldMeta_descriptor_, &FieldMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableMeta_descriptor_, &TableMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectRecord_descriptor_, &SelectRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectHeader_descriptor_, &SelectHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectData_descriptor_, &SelectData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resultset_descriptor_, &Resultset::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_resultset_2eproto() {
  delete FieldMeta::default_instance_;
  delete FieldMeta_reflection_;
  delete TableMeta::default_instance_;
  delete TableMeta_reflection_;
  delete SelectRecord::default_instance_;
  delete SelectRecord_reflection_;
  delete SelectHeader::default_instance_;
  delete SelectHeader_reflection_;
  delete SelectData::default_instance_;
  delete SelectData_reflection_;
  delete Resultset::default_instance_;
  delete Resultset_reflection_;
}

void protobuf_AddDesc_resultset_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::drizzled::message::protobuf_AddDesc_table_2eproto();
  ::drizzled::message::protobuf_AddDesc_schema_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017resultset.proto\022\020drizzled.message\032\013tab"
    "le.proto\032\014schema.proto\"r\n\tFieldMeta\022\022\n\nf"
    "ield_name\030\001 \002(\t\022\023\n\013field_alias\030\002 \001(\t\022\022\n\n"
    "table_name\030\003 \002(\t\022\023\n\013table_alias\030\004 \001(\t\022\023\n"
    "\013schema_name\030\005 \002(\t\"I\n\tTableMeta\022\023\n\013schem"
    "a_name\030\001 \002(\t\022\022\n\ntable_name\030\002 \002(\t\022\023\n\013tabl"
    "e_alias\030\003 \001(\t\"$\n\014SelectRecord\022\024\n\014record_"
    "value\030\001 \003(\014\"p\n\014SelectHeader\022/\n\ntable_met"
    "a\030\001 \003(\0132\033.drizzled.message.TableMeta\022/\n\n"
    "field_meta\030\002 \003(\0132\033.drizzled.message.Fiel"
    "dMeta\"e\n\nSelectData\022\022\n\nsegment_id\030\001 \002(\r\022"
    "\023\n\013end_segment\030\002 \002(\010\022.\n\006record\030\003 \003(\0132\036.d"
    "rizzled.message.SelectRecord\"\237\001\n\tResults"
    "et\022\013\n\003key\030\001 \002(\t\022\016\n\006schema\030\002 \002(\t\022\013\n\003sql\030\003"
    " \001(\t\0225\n\rselect_header\030\004 \001(\0132\036.drizzled.m"
    "essage.SelectHeader\0221\n\013select_data\030\005 \001(\013"
    "2\034.drizzled.message.SelectDataB\002H\001", 674);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "resultset.proto", &protobuf_RegisterTypes);
  FieldMeta::default_instance_ = new FieldMeta();
  TableMeta::default_instance_ = new TableMeta();
  SelectRecord::default_instance_ = new SelectRecord();
  SelectHeader::default_instance_ = new SelectHeader();
  SelectData::default_instance_ = new SelectData();
  Resultset::default_instance_ = new Resultset();
  FieldMeta::default_instance_->InitAsDefaultInstance();
  TableMeta::default_instance_->InitAsDefaultInstance();
  SelectRecord::default_instance_->InitAsDefaultInstance();
  SelectHeader::default_instance_->InitAsDefaultInstance();
  SelectData::default_instance_->InitAsDefaultInstance();
  Resultset::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_resultset_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_resultset_2eproto {
  StaticDescriptorInitializer_resultset_2eproto() {
    protobuf_AddDesc_resultset_2eproto();
  }
} static_descriptor_initializer_resultset_2eproto_;


// ===================================================================

const ::std::string FieldMeta::_default_field_name_;
const ::std::string FieldMeta::_default_field_alias_;
const ::std::string FieldMeta::_default_table_name_;
const ::std::string FieldMeta::_default_table_alias_;
const ::std::string FieldMeta::_default_schema_name_;
#ifndef _MSC_VER
const int FieldMeta::kFieldNameFieldNumber;
const int FieldMeta::kFieldAliasFieldNumber;
const int FieldMeta::kTableNameFieldNumber;
const int FieldMeta::kTableAliasFieldNumber;
const int FieldMeta::kSchemaNameFieldNumber;
#endif  // !_MSC_VER

FieldMeta::FieldMeta() {
  SharedCtor();
}

void FieldMeta::InitAsDefaultInstance() {
}

FieldMeta::FieldMeta(const FieldMeta& from) {
  SharedCtor();
  MergeFrom(from);
}

void FieldMeta::SharedCtor() {
  _cached_size_ = 0;
  field_name_ = const_cast< ::std::string*>(&_default_field_name_);
  field_alias_ = const_cast< ::std::string*>(&_default_field_alias_);
  table_name_ = const_cast< ::std::string*>(&_default_table_name_);
  table_alias_ = const_cast< ::std::string*>(&_default_table_alias_);
  schema_name_ = const_cast< ::std::string*>(&_default_schema_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldMeta::~FieldMeta() {
  SharedDtor();
}

void FieldMeta::SharedDtor() {
  if (field_name_ != &_default_field_name_) {
    delete field_name_;
  }
  if (field_alias_ != &_default_field_alias_) {
    delete field_alias_;
  }
  if (table_name_ != &_default_table_name_) {
    delete table_name_;
  }
  if (table_alias_ != &_default_table_alias_) {
    delete table_alias_;
  }
  if (schema_name_ != &_default_schema_name_) {
    delete schema_name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FieldMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldMeta_descriptor_;
}

const FieldMeta& FieldMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resultset_2eproto();  return *default_instance_;
}

FieldMeta* FieldMeta::default_instance_ = NULL;

FieldMeta* FieldMeta::New() const {
  return new FieldMeta;
}

void FieldMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (field_name_ != &_default_field_name_) {
        field_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (field_alias_ != &_default_field_alias_) {
        field_alias_->clear();
      }
    }
    if (_has_bit(2)) {
      if (table_name_ != &_default_table_name_) {
        table_name_->clear();
      }
    }
    if (_has_bit(3)) {
      if (table_alias_ != &_default_table_alias_) {
        table_alias_->clear();
      }
    }
    if (_has_bit(4)) {
      if (schema_name_ != &_default_schema_name_) {
        schema_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string field_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_field_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->field_name().data(), this->field_name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_field_alias;
        break;
      }
      
      // optional string field_alias = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_field_alias:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_field_alias()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->field_alias().data(), this->field_alias().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_table_name;
        break;
      }
      
      // required string table_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_table_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_table_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->table_name().data(), this->table_name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_table_alias;
        break;
      }
      
      // optional string table_alias = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_table_alias:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_table_alias()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->table_alias().data(), this->table_alias().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_schema_name;
        break;
      }
      
      // required string schema_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_schema_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_schema_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->schema_name().data(), this->schema_name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FieldMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FieldMeta::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string field_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->field_name(), output);
  }
  
  // optional string field_alias = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_alias().data(), this->field_alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->field_alias(), output);
  }
  
  // required string table_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->table_name(), output);
  }
  
  // optional string table_alias = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_alias().data(), this->table_alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->table_alias(), output);
  }
  
  // required string schema_name = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schema_name().data(), this->schema_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->schema_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FieldMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string field_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field_name(), target);
  }
  
  // optional string field_alias = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_alias().data(), this->field_alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field_alias(), target);
  }
  
  // required string table_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_name(), target);
  }
  
  // optional string table_alias = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_alias().data(), this->table_alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->table_alias(), target);
  }
  
  // required string schema_name = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schema_name().data(), this->schema_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->schema_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FieldMeta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string field_name = 1;
    if (has_field_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field_name());
    }
    
    // optional string field_alias = 2;
    if (has_field_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field_alias());
    }
    
    // required string table_name = 3;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional string table_alias = 4;
    if (has_table_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_alias());
    }
    
    // required string schema_name = 5;
    if (has_schema_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schema_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FieldMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FieldMeta::MergeFrom(const FieldMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_field_name(from.field_name());
    }
    if (from._has_bit(1)) {
      set_field_alias(from.field_alias());
    }
    if (from._has_bit(2)) {
      set_table_name(from.table_name());
    }
    if (from._has_bit(3)) {
      set_table_alias(from.table_alias());
    }
    if (from._has_bit(4)) {
      set_schema_name(from.schema_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldMeta::CopyFrom(const FieldMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000015) != 0x00000015) return false;
  
  return true;
}

void FieldMeta::Swap(FieldMeta* other) {
  if (other != this) {
    std::swap(field_name_, other->field_name_);
    std::swap(field_alias_, other->field_alias_);
    std::swap(table_name_, other->table_name_);
    std::swap(table_alias_, other->table_alias_);
    std::swap(schema_name_, other->schema_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FieldMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldMeta_descriptor_;
  metadata.reflection = FieldMeta_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TableMeta::_default_schema_name_;
const ::std::string TableMeta::_default_table_name_;
const ::std::string TableMeta::_default_table_alias_;
#ifndef _MSC_VER
const int TableMeta::kSchemaNameFieldNumber;
const int TableMeta::kTableNameFieldNumber;
const int TableMeta::kTableAliasFieldNumber;
#endif  // !_MSC_VER

TableMeta::TableMeta() {
  SharedCtor();
}

void TableMeta::InitAsDefaultInstance() {
}

TableMeta::TableMeta(const TableMeta& from) {
  SharedCtor();
  MergeFrom(from);
}

void TableMeta::SharedCtor() {
  _cached_size_ = 0;
  schema_name_ = const_cast< ::std::string*>(&_default_schema_name_);
  table_name_ = const_cast< ::std::string*>(&_default_table_name_);
  table_alias_ = const_cast< ::std::string*>(&_default_table_alias_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableMeta::~TableMeta() {
  SharedDtor();
}

void TableMeta::SharedDtor() {
  if (schema_name_ != &_default_schema_name_) {
    delete schema_name_;
  }
  if (table_name_ != &_default_table_name_) {
    delete table_name_;
  }
  if (table_alias_ != &_default_table_alias_) {
    delete table_alias_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TableMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableMeta_descriptor_;
}

const TableMeta& TableMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resultset_2eproto();  return *default_instance_;
}

TableMeta* TableMeta::default_instance_ = NULL;

TableMeta* TableMeta::New() const {
  return new TableMeta;
}

void TableMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (schema_name_ != &_default_schema_name_) {
        schema_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (table_name_ != &_default_table_name_) {
        table_name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (table_alias_ != &_default_table_alias_) {
        table_alias_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string schema_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_schema_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->schema_name().data(), this->schema_name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }
      
      // required string table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_table_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_table_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->table_name().data(), this->table_name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_table_alias;
        break;
      }
      
      // optional string table_alias = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_table_alias:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_table_alias()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->table_alias().data(), this->table_alias().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TableMeta::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string schema_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schema_name().data(), this->schema_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->schema_name(), output);
  }
  
  // required string table_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->table_name(), output);
  }
  
  // optional string table_alias = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_alias().data(), this->table_alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->table_alias(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string schema_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schema_name().data(), this->schema_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->schema_name(), target);
  }
  
  // required string table_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_name(), target);
  }
  
  // optional string table_alias = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_alias().data(), this->table_alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_alias(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableMeta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string schema_name = 1;
    if (has_schema_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schema_name());
    }
    
    // required string table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional string table_alias = 3;
    if (has_table_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_alias());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TableMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableMeta::MergeFrom(const TableMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_schema_name(from.schema_name());
    }
    if (from._has_bit(1)) {
      set_table_name(from.table_name());
    }
    if (from._has_bit(2)) {
      set_table_alias(from.table_alias());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableMeta::CopyFrom(const TableMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TableMeta::Swap(TableMeta* other) {
  if (other != this) {
    std::swap(schema_name_, other->schema_name_);
    std::swap(table_name_, other->table_name_);
    std::swap(table_alias_, other->table_alias_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableMeta_descriptor_;
  metadata.reflection = TableMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectRecord::kRecordValueFieldNumber;
#endif  // !_MSC_VER

SelectRecord::SelectRecord() {
  SharedCtor();
}

void SelectRecord::InitAsDefaultInstance() {
}

SelectRecord::SelectRecord(const SelectRecord& from) {
  SharedCtor();
  MergeFrom(from);
}

void SelectRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectRecord::~SelectRecord() {
  SharedDtor();
}

void SelectRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SelectRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectRecord_descriptor_;
}

const SelectRecord& SelectRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resultset_2eproto();  return *default_instance_;
}

SelectRecord* SelectRecord::default_instance_ = NULL;

SelectRecord* SelectRecord::New() const {
  return new SelectRecord;
}

void SelectRecord::Clear() {
  record_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes record_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_record_value:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->add_record_value()));
        if (input->ExpectTag(10)) goto parse_record_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelectRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SelectRecord::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated bytes record_value = 1;
  for (int i = 0; i < this->record_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->record_value(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelectRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes record_value = 1;
  for (int i = 0; i < this->record_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->record_value(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelectRecord::ByteSize() const {
  int total_size = 0;
  
  // repeated bytes record_value = 1;
  total_size += 1 * this->record_value_size();
  for (int i = 0; i < this->record_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->record_value(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SelectRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectRecord::MergeFrom(const SelectRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_value_.MergeFrom(from.record_value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectRecord::CopyFrom(const SelectRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectRecord::IsInitialized() const {
  
  return true;
}

void SelectRecord::Swap(SelectRecord* other) {
  if (other != this) {
    record_value_.Swap(&other->record_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectRecord_descriptor_;
  metadata.reflection = SelectRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectHeader::kTableMetaFieldNumber;
const int SelectHeader::kFieldMetaFieldNumber;
#endif  // !_MSC_VER

SelectHeader::SelectHeader() {
  SharedCtor();
}

void SelectHeader::InitAsDefaultInstance() {
}

SelectHeader::SelectHeader(const SelectHeader& from) {
  SharedCtor();
  MergeFrom(from);
}

void SelectHeader::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectHeader::~SelectHeader() {
  SharedDtor();
}

void SelectHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SelectHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectHeader_descriptor_;
}

const SelectHeader& SelectHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resultset_2eproto();  return *default_instance_;
}

SelectHeader* SelectHeader::default_instance_ = NULL;

SelectHeader* SelectHeader::New() const {
  return new SelectHeader;
}

void SelectHeader::Clear() {
  table_meta_.Clear();
  field_meta_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .drizzled.message.TableMeta table_meta = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_table_meta:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_table_meta()));
        if (input->ExpectTag(10)) goto parse_table_meta;
        if (input->ExpectTag(18)) goto parse_field_meta;
        break;
      }
      
      // repeated .drizzled.message.FieldMeta field_meta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_field_meta:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_field_meta()));
        if (input->ExpectTag(18)) goto parse_field_meta;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelectHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SelectHeader::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .drizzled.message.TableMeta table_meta = 1;
  for (int i = 0; i < this->table_meta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->table_meta(i), output);
  }
  
  // repeated .drizzled.message.FieldMeta field_meta = 2;
  for (int i = 0; i < this->field_meta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->field_meta(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelectHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .drizzled.message.TableMeta table_meta = 1;
  for (int i = 0; i < this->table_meta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_meta(i), target);
  }
  
  // repeated .drizzled.message.FieldMeta field_meta = 2;
  for (int i = 0; i < this->field_meta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->field_meta(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelectHeader::ByteSize() const {
  int total_size = 0;
  
  // repeated .drizzled.message.TableMeta table_meta = 1;
  total_size += 1 * this->table_meta_size();
  for (int i = 0; i < this->table_meta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_meta(i));
  }
  
  // repeated .drizzled.message.FieldMeta field_meta = 2;
  total_size += 1 * this->field_meta_size();
  for (int i = 0; i < this->field_meta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field_meta(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SelectHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectHeader::MergeFrom(const SelectHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_meta_.MergeFrom(from.table_meta_);
  field_meta_.MergeFrom(from.field_meta_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectHeader::CopyFrom(const SelectHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectHeader::IsInitialized() const {
  
  for (int i = 0; i < table_meta_size(); i++) {
    if (!this->table_meta(i).IsInitialized()) return false;
  }
  for (int i = 0; i < field_meta_size(); i++) {
    if (!this->field_meta(i).IsInitialized()) return false;
  }
  return true;
}

void SelectHeader::Swap(SelectHeader* other) {
  if (other != this) {
    table_meta_.Swap(&other->table_meta_);
    field_meta_.Swap(&other->field_meta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectHeader_descriptor_;
  metadata.reflection = SelectHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectData::kSegmentIdFieldNumber;
const int SelectData::kEndSegmentFieldNumber;
const int SelectData::kRecordFieldNumber;
#endif  // !_MSC_VER

SelectData::SelectData() {
  SharedCtor();
}

void SelectData::InitAsDefaultInstance() {
}

SelectData::SelectData(const SelectData& from) {
  SharedCtor();
  MergeFrom(from);
}

void SelectData::SharedCtor() {
  _cached_size_ = 0;
  segment_id_ = 0u;
  end_segment_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectData::~SelectData() {
  SharedDtor();
}

void SelectData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SelectData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectData_descriptor_;
}

const SelectData& SelectData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resultset_2eproto();  return *default_instance_;
}

SelectData* SelectData::default_instance_ = NULL;

SelectData* SelectData::New() const {
  return new SelectData;
}

void SelectData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segment_id_ = 0u;
    end_segment_ = false;
  }
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 segment_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &segment_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_end_segment;
        break;
      }
      
      // required bool end_segment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_end_segment:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &end_segment_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }
      
      // repeated .drizzled.message.SelectRecord record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_record:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_record()));
        if (input->ExpectTag(26)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SelectData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 segment_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->segment_id(), output);
  }
  
  // required bool end_segment = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->end_segment(), output);
  }
  
  // repeated .drizzled.message.SelectRecord record = 3;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->record(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelectData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 segment_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->segment_id(), target);
  }
  
  // required bool end_segment = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->end_segment(), target);
  }
  
  // repeated .drizzled.message.SelectRecord record = 3;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->record(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelectData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 segment_id = 1;
    if (has_segment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->segment_id());
    }
    
    // required bool end_segment = 2;
    if (has_end_segment()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .drizzled.message.SelectRecord record = 3;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SelectData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectData::MergeFrom(const SelectData& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_segment_id(from.segment_id());
    }
    if (from._has_bit(1)) {
      set_end_segment(from.end_segment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectData::CopyFrom(const SelectData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SelectData::Swap(SelectData* other) {
  if (other != this) {
    std::swap(segment_id_, other->segment_id_);
    std::swap(end_segment_, other->end_segment_);
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectData_descriptor_;
  metadata.reflection = SelectData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Resultset::_default_key_;
const ::std::string Resultset::_default_schema_;
const ::std::string Resultset::_default_sql_;
#ifndef _MSC_VER
const int Resultset::kKeyFieldNumber;
const int Resultset::kSchemaFieldNumber;
const int Resultset::kSqlFieldNumber;
const int Resultset::kSelectHeaderFieldNumber;
const int Resultset::kSelectDataFieldNumber;
#endif  // !_MSC_VER

Resultset::Resultset() {
  SharedCtor();
}

void Resultset::InitAsDefaultInstance() {
  select_header_ = const_cast< ::drizzled::message::SelectHeader*>(&::drizzled::message::SelectHeader::default_instance());
  select_data_ = const_cast< ::drizzled::message::SelectData*>(&::drizzled::message::SelectData::default_instance());
}

Resultset::Resultset(const Resultset& from) {
  SharedCtor();
  MergeFrom(from);
}

void Resultset::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&_default_key_);
  schema_ = const_cast< ::std::string*>(&_default_schema_);
  sql_ = const_cast< ::std::string*>(&_default_sql_);
  select_header_ = NULL;
  select_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resultset::~Resultset() {
  SharedDtor();
}

void Resultset::SharedDtor() {
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (schema_ != &_default_schema_) {
    delete schema_;
  }
  if (sql_ != &_default_sql_) {
    delete sql_;
  }
  if (this != default_instance_) {
    delete select_header_;
    delete select_data_;
  }
}

const ::google::protobuf::Descriptor* Resultset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resultset_descriptor_;
}

const Resultset& Resultset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resultset_2eproto();  return *default_instance_;
}

Resultset* Resultset::default_instance_ = NULL;

Resultset* Resultset::New() const {
  return new Resultset;
}

void Resultset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    if (_has_bit(1)) {
      if (schema_ != &_default_schema_) {
        schema_->clear();
      }
    }
    if (_has_bit(2)) {
      if (sql_ != &_default_sql_) {
        sql_->clear();
      }
    }
    if (_has_bit(3)) {
      if (select_header_ != NULL) select_header_->::drizzled::message::SelectHeader::Clear();
    }
    if (_has_bit(4)) {
      if (select_data_ != NULL) select_data_->::drizzled::message::SelectData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resultset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_key()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->key().data(), this->key().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_schema;
        break;
      }
      
      // required string schema = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_schema:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_schema()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->schema().data(), this->schema().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_sql;
        break;
      }
      
      // optional string sql = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sql:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sql()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sql().data(), this->sql().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_select_header;
        break;
      }
      
      // optional .drizzled.message.SelectHeader select_header = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_select_header:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_select_header()));
        if (input->ExpectTag(42)) goto parse_select_data;
        break;
      }
      
      // optional .drizzled.message.SelectData select_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_select_data:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_select_data()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Resultset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Resultset::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // required string schema = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schema().data(), this->schema().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->schema(), output);
  }
  
  // optional string sql = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sql(), output);
  }
  
  // optional .drizzled.message.SelectHeader select_header = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->select_header(), output);
  }
  
  // optional .drizzled.message.SelectData select_data = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->select_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Resultset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // required string schema = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schema().data(), this->schema().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->schema(), target);
  }
  
  // optional string sql = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sql(), target);
  }
  
  // optional .drizzled.message.SelectHeader select_header = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->select_header(), target);
  }
  
  // optional .drizzled.message.SelectData select_data = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->select_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Resultset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // required string schema = 2;
    if (has_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schema());
    }
    
    // optional string sql = 3;
    if (has_sql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql());
    }
    
    // optional .drizzled.message.SelectHeader select_header = 4;
    if (has_select_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->select_header());
    }
    
    // optional .drizzled.message.SelectData select_data = 5;
    if (has_select_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->select_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Resultset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resultset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resultset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resultset::MergeFrom(const Resultset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_schema(from.schema());
    }
    if (from._has_bit(2)) {
      set_sql(from.sql());
    }
    if (from._has_bit(3)) {
      mutable_select_header()->::drizzled::message::SelectHeader::MergeFrom(from.select_header());
    }
    if (from._has_bit(4)) {
      mutable_select_data()->::drizzled::message::SelectData::MergeFrom(from.select_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resultset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resultset::CopyFrom(const Resultset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resultset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_select_header()) {
    if (!this->select_header().IsInitialized()) return false;
  }
  if (has_select_data()) {
    if (!this->select_data().IsInitialized()) return false;
  }
  return true;
}

void Resultset::Swap(Resultset* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(schema_, other->schema_);
    std::swap(sql_, other->sql_);
    std::swap(select_header_, other->select_header_);
    std::swap(select_data_, other->select_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resultset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resultset_descriptor_;
  metadata.reflection = Resultset_reflection_;
  return metadata;
}


}  // namespace message
}  // namespace drizzled
