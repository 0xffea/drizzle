// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_resultset_2eproto__INCLUDED
#define PROTOBUF_resultset_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "table.pb.h"
#include "schema.pb.h"

namespace drizzled {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_resultset_2eproto();
void protobuf_AssignDesc_resultset_2eproto();
void protobuf_ShutdownFile_resultset_2eproto();

class FieldMeta;
class TableMeta;
class SelectRecord;
class SelectHeader;
class SelectData;
class Resultset;

// ===================================================================

class FieldMeta : public ::google::protobuf::Message {
 public:
  FieldMeta();
  virtual ~FieldMeta();
  
  FieldMeta(const FieldMeta& from);
  
  inline FieldMeta& operator=(const FieldMeta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldMeta& default_instance();
  void Swap(FieldMeta* other);
  
  // implements Message ----------------------------------------------
  
  FieldMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldMeta& from);
  void MergeFrom(const FieldMeta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string field_name = 1;
  inline bool has_field_name() const;
  inline void clear_field_name();
  static const int kFieldNameFieldNumber = 1;
  inline const ::std::string& field_name() const;
  inline void set_field_name(const ::std::string& value);
  inline void set_field_name(const char* value);
  inline void set_field_name(const char* value, size_t size);
  inline ::std::string* mutable_field_name();
  
  // optional string field_alias = 2;
  inline bool has_field_alias() const;
  inline void clear_field_alias();
  static const int kFieldAliasFieldNumber = 2;
  inline const ::std::string& field_alias() const;
  inline void set_field_alias(const ::std::string& value);
  inline void set_field_alias(const char* value);
  inline void set_field_alias(const char* value, size_t size);
  inline ::std::string* mutable_field_alias();
  
  // required string table_name = 3;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 3;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  
  // optional string table_alias = 4;
  inline bool has_table_alias() const;
  inline void clear_table_alias();
  static const int kTableAliasFieldNumber = 4;
  inline const ::std::string& table_alias() const;
  inline void set_table_alias(const ::std::string& value);
  inline void set_table_alias(const char* value);
  inline void set_table_alias(const char* value, size_t size);
  inline ::std::string* mutable_table_alias();
  
  // required string schema_name = 5;
  inline bool has_schema_name() const;
  inline void clear_schema_name();
  static const int kSchemaNameFieldNumber = 5;
  inline const ::std::string& schema_name() const;
  inline void set_schema_name(const ::std::string& value);
  inline void set_schema_name(const char* value);
  inline void set_schema_name(const char* value, size_t size);
  inline ::std::string* mutable_schema_name();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* field_name_;
  static const ::std::string _default_field_name_;
  ::std::string* field_alias_;
  static const ::std::string _default_field_alias_;
  ::std::string* table_name_;
  static const ::std::string _default_table_name_;
  ::std::string* table_alias_;
  static const ::std::string _default_table_alias_;
  ::std::string* schema_name_;
  static const ::std::string _default_schema_name_;
  friend void  protobuf_AddDesc_resultset_2eproto();
  friend void protobuf_AssignDesc_resultset_2eproto();
  friend void protobuf_ShutdownFile_resultset_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FieldMeta* default_instance_;
};
// -------------------------------------------------------------------

class TableMeta : public ::google::protobuf::Message {
 public:
  TableMeta();
  virtual ~TableMeta();
  
  TableMeta(const TableMeta& from);
  
  inline TableMeta& operator=(const TableMeta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableMeta& default_instance();
  void Swap(TableMeta* other);
  
  // implements Message ----------------------------------------------
  
  TableMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableMeta& from);
  void MergeFrom(const TableMeta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string schema_name = 1;
  inline bool has_schema_name() const;
  inline void clear_schema_name();
  static const int kSchemaNameFieldNumber = 1;
  inline const ::std::string& schema_name() const;
  inline void set_schema_name(const ::std::string& value);
  inline void set_schema_name(const char* value);
  inline void set_schema_name(const char* value, size_t size);
  inline ::std::string* mutable_schema_name();
  
  // required string table_name = 2;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 2;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  
  // optional string table_alias = 3;
  inline bool has_table_alias() const;
  inline void clear_table_alias();
  static const int kTableAliasFieldNumber = 3;
  inline const ::std::string& table_alias() const;
  inline void set_table_alias(const ::std::string& value);
  inline void set_table_alias(const char* value);
  inline void set_table_alias(const char* value, size_t size);
  inline ::std::string* mutable_table_alias();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* schema_name_;
  static const ::std::string _default_schema_name_;
  ::std::string* table_name_;
  static const ::std::string _default_table_name_;
  ::std::string* table_alias_;
  static const ::std::string _default_table_alias_;
  friend void  protobuf_AddDesc_resultset_2eproto();
  friend void protobuf_AssignDesc_resultset_2eproto();
  friend void protobuf_ShutdownFile_resultset_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static TableMeta* default_instance_;
};
// -------------------------------------------------------------------

class SelectRecord : public ::google::protobuf::Message {
 public:
  SelectRecord();
  virtual ~SelectRecord();
  
  SelectRecord(const SelectRecord& from);
  
  inline SelectRecord& operator=(const SelectRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectRecord& default_instance();
  void Swap(SelectRecord* other);
  
  // implements Message ----------------------------------------------
  
  SelectRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelectRecord& from);
  void MergeFrom(const SelectRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated bytes record_value = 1;
  inline int record_value_size() const;
  inline void clear_record_value();
  static const int kRecordValueFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& record_value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_record_value();
  inline const ::std::string& record_value(int index) const;
  inline ::std::string* mutable_record_value(int index);
  inline void set_record_value(int index, const ::std::string& value);
  inline void set_record_value(int index, const char* value);
  inline void set_record_value(int index, const void* value, size_t size);
  inline ::std::string* add_record_value();
  inline void add_record_value(const ::std::string& value);
  inline void add_record_value(const char* value);
  inline void add_record_value(const void* value, size_t size);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> record_value_;
  friend void  protobuf_AddDesc_resultset_2eproto();
  friend void protobuf_AssignDesc_resultset_2eproto();
  friend void protobuf_ShutdownFile_resultset_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SelectRecord* default_instance_;
};
// -------------------------------------------------------------------

class SelectHeader : public ::google::protobuf::Message {
 public:
  SelectHeader();
  virtual ~SelectHeader();
  
  SelectHeader(const SelectHeader& from);
  
  inline SelectHeader& operator=(const SelectHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectHeader& default_instance();
  void Swap(SelectHeader* other);
  
  // implements Message ----------------------------------------------
  
  SelectHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelectHeader& from);
  void MergeFrom(const SelectHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .drizzled.message.TableMeta table_meta = 1;
  inline int table_meta_size() const;
  inline void clear_table_meta();
  static const int kTableMetaFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::drizzled::message::TableMeta >& table_meta() const;
  inline ::google::protobuf::RepeatedPtrField< ::drizzled::message::TableMeta >* mutable_table_meta();
  inline const ::drizzled::message::TableMeta& table_meta(int index) const;
  inline ::drizzled::message::TableMeta* mutable_table_meta(int index);
  inline ::drizzled::message::TableMeta* add_table_meta();
  
  // repeated .drizzled.message.FieldMeta field_meta = 2;
  inline int field_meta_size() const;
  inline void clear_field_meta();
  static const int kFieldMetaFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::drizzled::message::FieldMeta >& field_meta() const;
  inline ::google::protobuf::RepeatedPtrField< ::drizzled::message::FieldMeta >* mutable_field_meta();
  inline const ::drizzled::message::FieldMeta& field_meta(int index) const;
  inline ::drizzled::message::FieldMeta* mutable_field_meta(int index);
  inline ::drizzled::message::FieldMeta* add_field_meta();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::drizzled::message::TableMeta > table_meta_;
  ::google::protobuf::RepeatedPtrField< ::drizzled::message::FieldMeta > field_meta_;
  friend void  protobuf_AddDesc_resultset_2eproto();
  friend void protobuf_AssignDesc_resultset_2eproto();
  friend void protobuf_ShutdownFile_resultset_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SelectHeader* default_instance_;
};
// -------------------------------------------------------------------

class SelectData : public ::google::protobuf::Message {
 public:
  SelectData();
  virtual ~SelectData();
  
  SelectData(const SelectData& from);
  
  inline SelectData& operator=(const SelectData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectData& default_instance();
  void Swap(SelectData* other);
  
  // implements Message ----------------------------------------------
  
  SelectData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelectData& from);
  void MergeFrom(const SelectData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 segment_id = 1;
  inline bool has_segment_id() const;
  inline void clear_segment_id();
  static const int kSegmentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 segment_id() const;
  inline void set_segment_id(::google::protobuf::uint32 value);
  
  // required bool end_segment = 2;
  inline bool has_end_segment() const;
  inline void clear_end_segment();
  static const int kEndSegmentFieldNumber = 2;
  inline bool end_segment() const;
  inline void set_end_segment(bool value);
  
  // repeated .drizzled.message.SelectRecord record = 3;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::drizzled::message::SelectRecord >& record() const;
  inline ::google::protobuf::RepeatedPtrField< ::drizzled::message::SelectRecord >* mutable_record();
  inline const ::drizzled::message::SelectRecord& record(int index) const;
  inline ::drizzled::message::SelectRecord* mutable_record(int index);
  inline ::drizzled::message::SelectRecord* add_record();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 segment_id_;
  bool end_segment_;
  ::google::protobuf::RepeatedPtrField< ::drizzled::message::SelectRecord > record_;
  friend void  protobuf_AddDesc_resultset_2eproto();
  friend void protobuf_AssignDesc_resultset_2eproto();
  friend void protobuf_ShutdownFile_resultset_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SelectData* default_instance_;
};
// -------------------------------------------------------------------

class Resultset : public ::google::protobuf::Message {
 public:
  Resultset();
  virtual ~Resultset();
  
  Resultset(const Resultset& from);
  
  inline Resultset& operator=(const Resultset& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Resultset& default_instance();
  void Swap(Resultset* other);
  
  // implements Message ----------------------------------------------
  
  Resultset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Resultset& from);
  void MergeFrom(const Resultset& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  
  // required string schema = 2;
  inline bool has_schema() const;
  inline void clear_schema();
  static const int kSchemaFieldNumber = 2;
  inline const ::std::string& schema() const;
  inline void set_schema(const ::std::string& value);
  inline void set_schema(const char* value);
  inline void set_schema(const char* value, size_t size);
  inline ::std::string* mutable_schema();
  
  // optional string sql = 3;
  inline bool has_sql() const;
  inline void clear_sql();
  static const int kSqlFieldNumber = 3;
  inline const ::std::string& sql() const;
  inline void set_sql(const ::std::string& value);
  inline void set_sql(const char* value);
  inline void set_sql(const char* value, size_t size);
  inline ::std::string* mutable_sql();
  
  // optional .drizzled.message.SelectHeader select_header = 4;
  inline bool has_select_header() const;
  inline void clear_select_header();
  static const int kSelectHeaderFieldNumber = 4;
  inline const ::drizzled::message::SelectHeader& select_header() const;
  inline ::drizzled::message::SelectHeader* mutable_select_header();
  
  // optional .drizzled.message.SelectData select_data = 5;
  inline bool has_select_data() const;
  inline void clear_select_data();
  static const int kSelectDataFieldNumber = 5;
  inline const ::drizzled::message::SelectData& select_data() const;
  inline ::drizzled::message::SelectData* mutable_select_data();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* key_;
  static const ::std::string _default_key_;
  ::std::string* schema_;
  static const ::std::string _default_schema_;
  ::std::string* sql_;
  static const ::std::string _default_sql_;
  ::drizzled::message::SelectHeader* select_header_;
  ::drizzled::message::SelectData* select_data_;
  friend void  protobuf_AddDesc_resultset_2eproto();
  friend void protobuf_AssignDesc_resultset_2eproto();
  friend void protobuf_ShutdownFile_resultset_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Resultset* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// FieldMeta

// required string field_name = 1;
inline bool FieldMeta::has_field_name() const {
  return _has_bit(0);
}
inline void FieldMeta::clear_field_name() {
  if (field_name_ != &_default_field_name_) {
    field_name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& FieldMeta::field_name() const {
  return *field_name_;
}
inline void FieldMeta::set_field_name(const ::std::string& value) {
  _set_bit(0);
  if (field_name_ == &_default_field_name_) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(value);
}
inline void FieldMeta::set_field_name(const char* value) {
  _set_bit(0);
  if (field_name_ == &_default_field_name_) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(value);
}
inline void FieldMeta::set_field_name(const char* value, size_t size) {
  _set_bit(0);
  if (field_name_ == &_default_field_name_) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FieldMeta::mutable_field_name() {
  _set_bit(0);
  if (field_name_ == &_default_field_name_) {
    field_name_ = new ::std::string;
  }
  return field_name_;
}

// optional string field_alias = 2;
inline bool FieldMeta::has_field_alias() const {
  return _has_bit(1);
}
inline void FieldMeta::clear_field_alias() {
  if (field_alias_ != &_default_field_alias_) {
    field_alias_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& FieldMeta::field_alias() const {
  return *field_alias_;
}
inline void FieldMeta::set_field_alias(const ::std::string& value) {
  _set_bit(1);
  if (field_alias_ == &_default_field_alias_) {
    field_alias_ = new ::std::string;
  }
  field_alias_->assign(value);
}
inline void FieldMeta::set_field_alias(const char* value) {
  _set_bit(1);
  if (field_alias_ == &_default_field_alias_) {
    field_alias_ = new ::std::string;
  }
  field_alias_->assign(value);
}
inline void FieldMeta::set_field_alias(const char* value, size_t size) {
  _set_bit(1);
  if (field_alias_ == &_default_field_alias_) {
    field_alias_ = new ::std::string;
  }
  field_alias_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FieldMeta::mutable_field_alias() {
  _set_bit(1);
  if (field_alias_ == &_default_field_alias_) {
    field_alias_ = new ::std::string;
  }
  return field_alias_;
}

// required string table_name = 3;
inline bool FieldMeta::has_table_name() const {
  return _has_bit(2);
}
inline void FieldMeta::clear_table_name() {
  if (table_name_ != &_default_table_name_) {
    table_name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& FieldMeta::table_name() const {
  return *table_name_;
}
inline void FieldMeta::set_table_name(const ::std::string& value) {
  _set_bit(2);
  if (table_name_ == &_default_table_name_) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void FieldMeta::set_table_name(const char* value) {
  _set_bit(2);
  if (table_name_ == &_default_table_name_) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void FieldMeta::set_table_name(const char* value, size_t size) {
  _set_bit(2);
  if (table_name_ == &_default_table_name_) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FieldMeta::mutable_table_name() {
  _set_bit(2);
  if (table_name_ == &_default_table_name_) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}

// optional string table_alias = 4;
inline bool FieldMeta::has_table_alias() const {
  return _has_bit(3);
}
inline void FieldMeta::clear_table_alias() {
  if (table_alias_ != &_default_table_alias_) {
    table_alias_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& FieldMeta::table_alias() const {
  return *table_alias_;
}
inline void FieldMeta::set_table_alias(const ::std::string& value) {
  _set_bit(3);
  if (table_alias_ == &_default_table_alias_) {
    table_alias_ = new ::std::string;
  }
  table_alias_->assign(value);
}
inline void FieldMeta::set_table_alias(const char* value) {
  _set_bit(3);
  if (table_alias_ == &_default_table_alias_) {
    table_alias_ = new ::std::string;
  }
  table_alias_->assign(value);
}
inline void FieldMeta::set_table_alias(const char* value, size_t size) {
  _set_bit(3);
  if (table_alias_ == &_default_table_alias_) {
    table_alias_ = new ::std::string;
  }
  table_alias_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FieldMeta::mutable_table_alias() {
  _set_bit(3);
  if (table_alias_ == &_default_table_alias_) {
    table_alias_ = new ::std::string;
  }
  return table_alias_;
}

// required string schema_name = 5;
inline bool FieldMeta::has_schema_name() const {
  return _has_bit(4);
}
inline void FieldMeta::clear_schema_name() {
  if (schema_name_ != &_default_schema_name_) {
    schema_name_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& FieldMeta::schema_name() const {
  return *schema_name_;
}
inline void FieldMeta::set_schema_name(const ::std::string& value) {
  _set_bit(4);
  if (schema_name_ == &_default_schema_name_) {
    schema_name_ = new ::std::string;
  }
  schema_name_->assign(value);
}
inline void FieldMeta::set_schema_name(const char* value) {
  _set_bit(4);
  if (schema_name_ == &_default_schema_name_) {
    schema_name_ = new ::std::string;
  }
  schema_name_->assign(value);
}
inline void FieldMeta::set_schema_name(const char* value, size_t size) {
  _set_bit(4);
  if (schema_name_ == &_default_schema_name_) {
    schema_name_ = new ::std::string;
  }
  schema_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FieldMeta::mutable_schema_name() {
  _set_bit(4);
  if (schema_name_ == &_default_schema_name_) {
    schema_name_ = new ::std::string;
  }
  return schema_name_;
}

// -------------------------------------------------------------------

// TableMeta

// required string schema_name = 1;
inline bool TableMeta::has_schema_name() const {
  return _has_bit(0);
}
inline void TableMeta::clear_schema_name() {
  if (schema_name_ != &_default_schema_name_) {
    schema_name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& TableMeta::schema_name() const {
  return *schema_name_;
}
inline void TableMeta::set_schema_name(const ::std::string& value) {
  _set_bit(0);
  if (schema_name_ == &_default_schema_name_) {
    schema_name_ = new ::std::string;
  }
  schema_name_->assign(value);
}
inline void TableMeta::set_schema_name(const char* value) {
  _set_bit(0);
  if (schema_name_ == &_default_schema_name_) {
    schema_name_ = new ::std::string;
  }
  schema_name_->assign(value);
}
inline void TableMeta::set_schema_name(const char* value, size_t size) {
  _set_bit(0);
  if (schema_name_ == &_default_schema_name_) {
    schema_name_ = new ::std::string;
  }
  schema_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TableMeta::mutable_schema_name() {
  _set_bit(0);
  if (schema_name_ == &_default_schema_name_) {
    schema_name_ = new ::std::string;
  }
  return schema_name_;
}

// required string table_name = 2;
inline bool TableMeta::has_table_name() const {
  return _has_bit(1);
}
inline void TableMeta::clear_table_name() {
  if (table_name_ != &_default_table_name_) {
    table_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& TableMeta::table_name() const {
  return *table_name_;
}
inline void TableMeta::set_table_name(const ::std::string& value) {
  _set_bit(1);
  if (table_name_ == &_default_table_name_) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void TableMeta::set_table_name(const char* value) {
  _set_bit(1);
  if (table_name_ == &_default_table_name_) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void TableMeta::set_table_name(const char* value, size_t size) {
  _set_bit(1);
  if (table_name_ == &_default_table_name_) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TableMeta::mutable_table_name() {
  _set_bit(1);
  if (table_name_ == &_default_table_name_) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}

// optional string table_alias = 3;
inline bool TableMeta::has_table_alias() const {
  return _has_bit(2);
}
inline void TableMeta::clear_table_alias() {
  if (table_alias_ != &_default_table_alias_) {
    table_alias_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& TableMeta::table_alias() const {
  return *table_alias_;
}
inline void TableMeta::set_table_alias(const ::std::string& value) {
  _set_bit(2);
  if (table_alias_ == &_default_table_alias_) {
    table_alias_ = new ::std::string;
  }
  table_alias_->assign(value);
}
inline void TableMeta::set_table_alias(const char* value) {
  _set_bit(2);
  if (table_alias_ == &_default_table_alias_) {
    table_alias_ = new ::std::string;
  }
  table_alias_->assign(value);
}
inline void TableMeta::set_table_alias(const char* value, size_t size) {
  _set_bit(2);
  if (table_alias_ == &_default_table_alias_) {
    table_alias_ = new ::std::string;
  }
  table_alias_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TableMeta::mutable_table_alias() {
  _set_bit(2);
  if (table_alias_ == &_default_table_alias_) {
    table_alias_ = new ::std::string;
  }
  return table_alias_;
}

// -------------------------------------------------------------------

// SelectRecord

// repeated bytes record_value = 1;
inline int SelectRecord::record_value_size() const {
  return record_value_.size();
}
inline void SelectRecord::clear_record_value() {
  record_value_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SelectRecord::record_value() const {
  return record_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SelectRecord::mutable_record_value() {
  return &record_value_;
}
inline const ::std::string& SelectRecord::record_value(int index) const {
  return record_value_.Get(index);
}
inline ::std::string* SelectRecord::mutable_record_value(int index) {
  return record_value_.Mutable(index);
}
inline void SelectRecord::set_record_value(int index, const ::std::string& value) {
  record_value_.Mutable(index)->assign(value);
}
inline void SelectRecord::set_record_value(int index, const char* value) {
  record_value_.Mutable(index)->assign(value);
}
inline void SelectRecord::set_record_value(int index, const void* value, size_t size) {
  record_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SelectRecord::add_record_value() {
  return record_value_.Add();
}
inline void SelectRecord::add_record_value(const ::std::string& value) {
  record_value_.Add()->assign(value);
}
inline void SelectRecord::add_record_value(const char* value) {
  record_value_.Add()->assign(value);
}
inline void SelectRecord::add_record_value(const void* value, size_t size) {
  record_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// -------------------------------------------------------------------

// SelectHeader

// repeated .drizzled.message.TableMeta table_meta = 1;
inline int SelectHeader::table_meta_size() const {
  return table_meta_.size();
}
inline void SelectHeader::clear_table_meta() {
  table_meta_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::drizzled::message::TableMeta >&
SelectHeader::table_meta() const {
  return table_meta_;
}
inline ::google::protobuf::RepeatedPtrField< ::drizzled::message::TableMeta >*
SelectHeader::mutable_table_meta() {
  return &table_meta_;
}
inline const ::drizzled::message::TableMeta& SelectHeader::table_meta(int index) const {
  return table_meta_.Get(index);
}
inline ::drizzled::message::TableMeta* SelectHeader::mutable_table_meta(int index) {
  return table_meta_.Mutable(index);
}
inline ::drizzled::message::TableMeta* SelectHeader::add_table_meta() {
  return table_meta_.Add();
}

// repeated .drizzled.message.FieldMeta field_meta = 2;
inline int SelectHeader::field_meta_size() const {
  return field_meta_.size();
}
inline void SelectHeader::clear_field_meta() {
  field_meta_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::drizzled::message::FieldMeta >&
SelectHeader::field_meta() const {
  return field_meta_;
}
inline ::google::protobuf::RepeatedPtrField< ::drizzled::message::FieldMeta >*
SelectHeader::mutable_field_meta() {
  return &field_meta_;
}
inline const ::drizzled::message::FieldMeta& SelectHeader::field_meta(int index) const {
  return field_meta_.Get(index);
}
inline ::drizzled::message::FieldMeta* SelectHeader::mutable_field_meta(int index) {
  return field_meta_.Mutable(index);
}
inline ::drizzled::message::FieldMeta* SelectHeader::add_field_meta() {
  return field_meta_.Add();
}

// -------------------------------------------------------------------

// SelectData

// required uint32 segment_id = 1;
inline bool SelectData::has_segment_id() const {
  return _has_bit(0);
}
inline void SelectData::clear_segment_id() {
  segment_id_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 SelectData::segment_id() const {
  return segment_id_;
}
inline void SelectData::set_segment_id(::google::protobuf::uint32 value) {
  _set_bit(0);
  segment_id_ = value;
}

// required bool end_segment = 2;
inline bool SelectData::has_end_segment() const {
  return _has_bit(1);
}
inline void SelectData::clear_end_segment() {
  end_segment_ = false;
  _clear_bit(1);
}
inline bool SelectData::end_segment() const {
  return end_segment_;
}
inline void SelectData::set_end_segment(bool value) {
  _set_bit(1);
  end_segment_ = value;
}

// repeated .drizzled.message.SelectRecord record = 3;
inline int SelectData::record_size() const {
  return record_.size();
}
inline void SelectData::clear_record() {
  record_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::drizzled::message::SelectRecord >&
SelectData::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::drizzled::message::SelectRecord >*
SelectData::mutable_record() {
  return &record_;
}
inline const ::drizzled::message::SelectRecord& SelectData::record(int index) const {
  return record_.Get(index);
}
inline ::drizzled::message::SelectRecord* SelectData::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::drizzled::message::SelectRecord* SelectData::add_record() {
  return record_.Add();
}

// -------------------------------------------------------------------

// Resultset

// required string key = 1;
inline bool Resultset::has_key() const {
  return _has_bit(0);
}
inline void Resultset::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Resultset::key() const {
  return *key_;
}
inline void Resultset::set_key(const ::std::string& value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Resultset::set_key(const char* value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Resultset::set_key(const char* value, size_t size) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Resultset::mutable_key() {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// required string schema = 2;
inline bool Resultset::has_schema() const {
  return _has_bit(1);
}
inline void Resultset::clear_schema() {
  if (schema_ != &_default_schema_) {
    schema_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Resultset::schema() const {
  return *schema_;
}
inline void Resultset::set_schema(const ::std::string& value) {
  _set_bit(1);
  if (schema_ == &_default_schema_) {
    schema_ = new ::std::string;
  }
  schema_->assign(value);
}
inline void Resultset::set_schema(const char* value) {
  _set_bit(1);
  if (schema_ == &_default_schema_) {
    schema_ = new ::std::string;
  }
  schema_->assign(value);
}
inline void Resultset::set_schema(const char* value, size_t size) {
  _set_bit(1);
  if (schema_ == &_default_schema_) {
    schema_ = new ::std::string;
  }
  schema_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Resultset::mutable_schema() {
  _set_bit(1);
  if (schema_ == &_default_schema_) {
    schema_ = new ::std::string;
  }
  return schema_;
}

// optional string sql = 3;
inline bool Resultset::has_sql() const {
  return _has_bit(2);
}
inline void Resultset::clear_sql() {
  if (sql_ != &_default_sql_) {
    sql_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Resultset::sql() const {
  return *sql_;
}
inline void Resultset::set_sql(const ::std::string& value) {
  _set_bit(2);
  if (sql_ == &_default_sql_) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
}
inline void Resultset::set_sql(const char* value) {
  _set_bit(2);
  if (sql_ == &_default_sql_) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
}
inline void Resultset::set_sql(const char* value, size_t size) {
  _set_bit(2);
  if (sql_ == &_default_sql_) {
    sql_ = new ::std::string;
  }
  sql_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Resultset::mutable_sql() {
  _set_bit(2);
  if (sql_ == &_default_sql_) {
    sql_ = new ::std::string;
  }
  return sql_;
}

// optional .drizzled.message.SelectHeader select_header = 4;
inline bool Resultset::has_select_header() const {
  return _has_bit(3);
}
inline void Resultset::clear_select_header() {
  if (select_header_ != NULL) select_header_->::drizzled::message::SelectHeader::Clear();
  _clear_bit(3);
}
inline const ::drizzled::message::SelectHeader& Resultset::select_header() const {
  return select_header_ != NULL ? *select_header_ : *default_instance_->select_header_;
}
inline ::drizzled::message::SelectHeader* Resultset::mutable_select_header() {
  _set_bit(3);
  if (select_header_ == NULL) select_header_ = new ::drizzled::message::SelectHeader;
  return select_header_;
}

// optional .drizzled.message.SelectData select_data = 5;
inline bool Resultset::has_select_data() const {
  return _has_bit(4);
}
inline void Resultset::clear_select_data() {
  if (select_data_ != NULL) select_data_->::drizzled::message::SelectData::Clear();
  _clear_bit(4);
}
inline const ::drizzled::message::SelectData& Resultset::select_data() const {
  return select_data_ != NULL ? *select_data_ : *default_instance_->select_data_;
}
inline ::drizzled::message::SelectData* Resultset::mutable_select_data() {
  _set_bit(4);
  if (select_data_ == NULL) select_data_ = new ::drizzled::message::SelectData;
  return select_data_;
}


}  // namespace message
}  // namespace drizzled

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_resultset_2eproto__INCLUDED
